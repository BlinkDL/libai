[08/23 10:25:37] libai INFO: Rank of current process: 1. World size: 2
[08/23 10:25:37] libai INFO: Command line arguments: Namespace(config_file='projects/RWKV_v4/configs/config_test.py', eval_only=False, fast_dev_run=False, opts=[], resume=False)
[08/23 10:25:37] libai INFO: Contents of args.config_file=projects/RWKV_v4/configs/config_test.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_config[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mtokenizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT2Tokenizer[39m
[38;5;242m# 配置 dataloader `build_image_train_loader` 和 `build_image_test_loader` 是 LiBai 提供的用于创建图像数据的训练集和测试集 DataLoader 的两个函数[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_nlp_test_loader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_nlp_train_loader[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15moneflow[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mflow[39m

[38;5;242m# 配置 model[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmodel[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT[39m[38;5;15m [39m[38;5;15m,[39m[38;5;15mGPTConfig[39m
[38;5;242m# 导入自定义的 dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mdataset[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mRWKVDataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mutils[39m[38;5;15m.[39m[38;5;15mconfig_optimizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_RWKV_v4_config_optim[39m


[38;5;15mtest[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15menable[39m[38;5;197m=[39m[38;5;81mFalse[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mweight_style[39m[38;5;197m=[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;186m"[39m[38;5;186mpytorch[39m[38;5;186m"[39m
[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mpath[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/RWKV-v4/for_load.pth[39m[38;5;186m"[39m

[38;5;15mgraph[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/models/graph.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mgraph[39m

[38;5;15mgraph[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;242m# optim = get_config("common/optim.py").optim[39m
[38;5;15moptim[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mAdam[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mparams[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mget_RWKV_v4_config_optim[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr[39m[38;5;197m=[39m[38;5;141m8e-4[39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;242m# 配置model[39m
[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mGPT[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mvocab_size[39m[38;5;197m=[39m[38;5;141m6064[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mmodel_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mRWKV[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_layer[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_embd[39m[38;5;197m=[39m[38;5;141m1024[39m
[38;5;15m)[39m

[38;5;242m# 训练过程[39m
[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/train.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mtrain[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minput_placement_device[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mcpu[39m[38;5;186m"[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mdist[39m[38;5;197m.[39m[38;5;15mpipeline_num_layers[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m6[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_micro_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mscheduler[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mlr_scheduler[39m[38;5;197m.[39m[38;5;15mStepLR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mstep_size[39m[38;5;197m=[39m[38;5;141m1000[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m        [39m[38;5;15mgamma[39m[38;5;197m=[39m[38;5;141m1.0[39m
[38;5;15m)[39m[38;5;15m [39m

[38;5;242m# false = fp32[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mdatafile[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/data/enwik8[39m[38;5;186m"[39m
[38;5;242m# 获得一个 DataLoader 的配置对象[39m
[38;5;15mdataloader[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mbuild_nlp_train_loader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mdataset[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m        [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mRWKVDataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_dir[39m[38;5;197m=[39m[38;5;15mdatafile[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mepoch_length_fixed[39m[38;5;197m=[39m[38;5;141m9996[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# train.train_iter=3[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_epoch[39m[38;5;197m=[39m[38;5;141m1[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186moutput/rwkv_output_loss_compare[39m[38;5;186m"[39m
[38;5;242m# train.load_weight = "/home/zhangxiaoyu/RWKV-LM/libai/projects/RWKV_v4/model/output_model/" # 采用同一个model进行初始化[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mrdma_enabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# model.cfg.hidden_dropout_prob= 0.0 # 关闭所有的dropout[39m
[38;5;242m# model.cfg.attention_probs_dropout_prob= 0.0[39m
[38;5;242m# model.cfg.bias_dropout_fusion= False[39m

[38;5;242m# train.dist.pipeline_parallel_size=2[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mevaluation[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# train.train_iter=5[39m
[38;5;242m# train.dist.tensor_parallel_size = 2  # 并行度为 4 的模型并行[39m
[38;5;242m# train.dist.tensor_parallel_size = 4  # 并行度为 4 的模型并行[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mactivation_checkpoint[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m [39m

[08/23 10:25:37] libai.engine.default INFO: Prepare training, validating, testing set
[08/23 10:25:39] libai.engine.default INFO: Auto-scaling the config to train.train_iter=10000, train.warmup_iter=0
[08/23 10:25:43] libai.engine.default INFO: Model:
GPT(
  (emb): VocabEmbedding(num_embeddings=6064, embedding_dim=1024)
  (blocks): Sequential(
    (0): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln0): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (1): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (2): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (3): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (4): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (5): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
  )
  (ln_out): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
  (head): Linear1D(in_features=1024, out_features=6064, bias=False, parallel=row)
  (head_q): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
  (head_k): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
)
[08/23 10:25:43] libai.engine.trainer INFO: Starting training from iteration 0
[08/23 10:25:44] libai.models.utils.graph_base INFO: Start compling the train graph which may take some time. Please wait for a moment ...
[08/23 10:30:29] libai INFO: Rank of current process: 1. World size: 2
[08/23 10:30:29] libai INFO: Command line arguments: Namespace(config_file='projects/RWKV_v4/configs/config_test.py', eval_only=False, fast_dev_run=False, opts=[], resume=False)
[08/23 10:30:29] libai INFO: Contents of args.config_file=projects/RWKV_v4/configs/config_test.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_config[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mtokenizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT2Tokenizer[39m
[38;5;242m# 配置 dataloader `build_image_train_loader` 和 `build_image_test_loader` 是 LiBai 提供的用于创建图像数据的训练集和测试集 DataLoader 的两个函数[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_nlp_test_loader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_nlp_train_loader[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15moneflow[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mflow[39m

[38;5;242m# 配置 model[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmodel[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT[39m[38;5;15m [39m[38;5;15m,[39m[38;5;15mGPTConfig[39m
[38;5;242m# 导入自定义的 dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mdataset[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mRWKVDataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mutils[39m[38;5;15m.[39m[38;5;15mconfig_optimizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_RWKV_v4_config_optim[39m


[38;5;15mtest[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15menable[39m[38;5;197m=[39m[38;5;81mFalse[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mweight_style[39m[38;5;197m=[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;186m"[39m[38;5;186mpytorch[39m[38;5;186m"[39m
[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mpath[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/RWKV-v4/for_load.pth[39m[38;5;186m"[39m

[38;5;15mgraph[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/models/graph.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mgraph[39m

[38;5;15mgraph[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;242m# optim = get_config("common/optim.py").optim[39m
[38;5;15moptim[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mAdam[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mparams[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mget_RWKV_v4_config_optim[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr[39m[38;5;197m=[39m[38;5;141m8e-4[39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;242m# 配置model[39m
[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mGPT[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mvocab_size[39m[38;5;197m=[39m[38;5;141m6064[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mmodel_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mRWKV[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_layer[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_embd[39m[38;5;197m=[39m[38;5;141m1024[39m
[38;5;15m)[39m

[38;5;242m# 训练过程[39m
[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/train.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mtrain[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minput_placement_device[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mcpu[39m[38;5;186m"[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mdist[39m[38;5;197m.[39m[38;5;15mpipeline_num_layers[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m6[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_micro_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mscheduler[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mlr_scheduler[39m[38;5;197m.[39m[38;5;15mStepLR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mstep_size[39m[38;5;197m=[39m[38;5;141m1000[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m        [39m[38;5;15mgamma[39m[38;5;197m=[39m[38;5;141m1.0[39m
[38;5;15m)[39m[38;5;15m [39m

[38;5;242m# false = fp32[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mdatafile[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/data/enwik8[39m[38;5;186m"[39m
[38;5;242m# 获得一个 DataLoader 的配置对象[39m
[38;5;15mdataloader[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mbuild_nlp_train_loader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mdataset[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m        [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mRWKVDataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_dir[39m[38;5;197m=[39m[38;5;15mdatafile[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mepoch_length_fixed[39m[38;5;197m=[39m[38;5;141m9996[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# train.train_iter=3[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_epoch[39m[38;5;197m=[39m[38;5;141m1[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186moutput/rwkv_output_loss_compare[39m[38;5;186m"[39m
[38;5;242m# train.load_weight = "/home/zhangxiaoyu/RWKV-LM/libai/projects/RWKV_v4/model/output_model/" # 采用同一个model进行初始化[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mrdma_enabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# model.cfg.hidden_dropout_prob= 0.0 # 关闭所有的dropout[39m
[38;5;242m# model.cfg.attention_probs_dropout_prob= 0.0[39m
[38;5;242m# model.cfg.bias_dropout_fusion= False[39m

[38;5;242m# train.dist.pipeline_parallel_size=2[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mevaluation[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# train.train_iter=5[39m
[38;5;242m# train.dist.tensor_parallel_size = 2  # 并行度为 4 的模型并行[39m
[38;5;242m# train.dist.tensor_parallel_size = 4  # 并行度为 4 的模型并行[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mactivation_checkpoint[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m [39m

[08/23 10:30:29] libai.engine.default INFO: Prepare training, validating, testing set
[08/23 10:30:31] libai.engine.default INFO: Auto-scaling the config to train.train_iter=10000, train.warmup_iter=0
[08/23 10:30:35] libai.engine.default INFO: Model:
GPT(
  (emb): VocabEmbedding(num_embeddings=6064, embedding_dim=1024)
  (blocks): Sequential(
    (0): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln0): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (1): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (2): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (3): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (4): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (5): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
  )
  (ln_out): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
  (head): Linear1D(in_features=1024, out_features=6064, bias=False, parallel=row)
  (head_q): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
  (head_k): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
)
[08/23 10:30:35] libai.engine.trainer INFO: Starting training from iteration 0
[08/23 10:30:36] libai.models.utils.graph_base INFO: Start compling the train graph which may take some time. Please wait for a moment ...
[08/23 10:34:03] libai INFO: Rank of current process: 1. World size: 2
[08/23 10:34:03] libai INFO: Command line arguments: Namespace(config_file='projects/RWKV_v4/configs/config_test.py', eval_only=False, fast_dev_run=False, opts=[], resume=False)
[08/23 10:34:03] libai INFO: Contents of args.config_file=projects/RWKV_v4/configs/config_test.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_config[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mtokenizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT2Tokenizer[39m
[38;5;242m# 配置 dataloader `build_image_train_loader` 和 `build_image_test_loader` 是 LiBai 提供的用于创建图像数据的训练集和测试集 DataLoader 的两个函数[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_nlp_test_loader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_nlp_train_loader[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15moneflow[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mflow[39m

[38;5;242m# 配置 model[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmodel[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT[39m[38;5;15m [39m[38;5;15m,[39m[38;5;15mGPTConfig[39m
[38;5;242m# 导入自定义的 dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mdataset[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mRWKVDataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mutils[39m[38;5;15m.[39m[38;5;15mconfig_optimizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_RWKV_v4_config_optim[39m


[38;5;15mtest[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15menable[39m[38;5;197m=[39m[38;5;81mFalse[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mweight_style[39m[38;5;197m=[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;186m"[39m[38;5;186mpytorch[39m[38;5;186m"[39m
[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mpath[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/RWKV-v4/for_load.pth[39m[38;5;186m"[39m

[38;5;15mgraph[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/models/graph.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mgraph[39m

[38;5;15mgraph[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;242m# optim = get_config("common/optim.py").optim[39m
[38;5;15moptim[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mAdam[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mparams[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mget_RWKV_v4_config_optim[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr[39m[38;5;197m=[39m[38;5;141m8e-4[39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;242m# 配置model[39m
[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mGPT[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mvocab_size[39m[38;5;197m=[39m[38;5;141m6064[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mmodel_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mRWKV[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_layer[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_embd[39m[38;5;197m=[39m[38;5;141m1024[39m
[38;5;15m)[39m

[38;5;242m# 训练过程[39m
[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/train.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mtrain[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minput_placement_device[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mcpu[39m[38;5;186m"[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mdist[39m[38;5;197m.[39m[38;5;15mpipeline_num_layers[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m6[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_micro_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mscheduler[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mlr_scheduler[39m[38;5;197m.[39m[38;5;15mStepLR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mstep_size[39m[38;5;197m=[39m[38;5;141m1000[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m        [39m[38;5;15mgamma[39m[38;5;197m=[39m[38;5;141m1.0[39m
[38;5;15m)[39m[38;5;15m [39m

[38;5;242m# false = fp32[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mdatafile[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/data/enwik8[39m[38;5;186m"[39m
[38;5;242m# 获得一个 DataLoader 的配置对象[39m
[38;5;15mdataloader[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mbuild_nlp_train_loader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mdataset[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m        [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mRWKVDataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_dir[39m[38;5;197m=[39m[38;5;15mdatafile[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mepoch_length_fixed[39m[38;5;197m=[39m[38;5;141m9996[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# train.train_iter=3[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_epoch[39m[38;5;197m=[39m[38;5;141m1[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186moutput/rwkv_output_loss_compare[39m[38;5;186m"[39m
[38;5;242m# train.load_weight = "/home/zhangxiaoyu/RWKV-LM/libai/projects/RWKV_v4/model/output_model/" # 采用同一个model进行初始化[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mrdma_enabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# model.cfg.hidden_dropout_prob= 0.0 # 关闭所有的dropout[39m
[38;5;242m# model.cfg.attention_probs_dropout_prob= 0.0[39m
[38;5;242m# model.cfg.bias_dropout_fusion= False[39m

[38;5;242m# train.dist.pipeline_parallel_size=2[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mevaluation[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# train.train_iter=5[39m
[38;5;242m# train.dist.tensor_parallel_size = 2  # 并行度为 4 的模型并行[39m
[38;5;242m# train.dist.tensor_parallel_size = 4  # 并行度为 4 的模型并行[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mactivation_checkpoint[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m [39m

[08/23 10:34:04] libai.engine.default INFO: Prepare training, validating, testing set
[08/23 10:34:05] libai.engine.default INFO: Auto-scaling the config to train.train_iter=10000, train.warmup_iter=0
[08/23 10:34:09] libai.engine.default INFO: Model:
GPT(
  (emb): VocabEmbedding(num_embeddings=6064, embedding_dim=1024)
  (blocks): Sequential(
    (0): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln0): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (1): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (2): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (3): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (4): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (5): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
  )
  (ln_out): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
  (head): Linear1D(in_features=1024, out_features=6064, bias=False, parallel=row)
  (head_q): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
  (head_k): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
)
[08/23 10:34:09] libai.engine.trainer INFO: Starting training from iteration 0
[08/23 10:34:10] libai.models.utils.graph_base INFO: Start compling the train graph which may take some time. Please wait for a moment ...
[08/23 10:39:30] libai INFO: Rank of current process: 1. World size: 2
[08/23 10:39:30] libai INFO: Command line arguments: Namespace(config_file='projects/RWKV_v4/configs/config_test.py', eval_only=False, fast_dev_run=False, opts=[], resume=False)
[08/23 10:39:30] libai INFO: Contents of args.config_file=projects/RWKV_v4/configs/config_test.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_config[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mtokenizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT2Tokenizer[39m
[38;5;242m# 配置 dataloader `build_image_train_loader` 和 `build_image_test_loader` 是 LiBai 提供的用于创建图像数据的训练集和测试集 DataLoader 的两个函数[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_nlp_test_loader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_nlp_train_loader[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15moneflow[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mflow[39m

[38;5;242m# 配置 model[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmodel[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT[39m[38;5;15m [39m[38;5;15m,[39m[38;5;15mGPTConfig[39m
[38;5;242m# 导入自定义的 dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mdataset[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mRWKVDataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mutils[39m[38;5;15m.[39m[38;5;15mconfig_optimizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_RWKV_v4_config_optim[39m


[38;5;15mtest[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15menable[39m[38;5;197m=[39m[38;5;81mFalse[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mweight_style[39m[38;5;197m=[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;186m"[39m[38;5;186mpytorch[39m[38;5;186m"[39m
[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mpath[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/RWKV-v4/for_load.pth[39m[38;5;186m"[39m

[38;5;15mgraph[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/models/graph.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mgraph[39m

[38;5;15mgraph[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;242m# optim = get_config("common/optim.py").optim[39m
[38;5;15moptim[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mAdam[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mparams[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mget_RWKV_v4_config_optim[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr[39m[38;5;197m=[39m[38;5;141m8e-4[39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;242m# 配置model[39m
[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mGPT[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mvocab_size[39m[38;5;197m=[39m[38;5;141m6064[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mmodel_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mRWKV[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_layer[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_embd[39m[38;5;197m=[39m[38;5;141m1024[39m
[38;5;15m)[39m

[38;5;242m# 训练过程[39m
[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/train.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mtrain[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minput_placement_device[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mcpu[39m[38;5;186m"[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mdist[39m[38;5;197m.[39m[38;5;15mpipeline_num_layers[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m6[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_micro_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mscheduler[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mlr_scheduler[39m[38;5;197m.[39m[38;5;15mStepLR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mstep_size[39m[38;5;197m=[39m[38;5;141m1000[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m        [39m[38;5;15mgamma[39m[38;5;197m=[39m[38;5;141m1.0[39m
[38;5;15m)[39m[38;5;15m [39m

[38;5;242m# false = fp32[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mdatafile[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/data/enwik8[39m[38;5;186m"[39m
[38;5;242m# 获得一个 DataLoader 的配置对象[39m
[38;5;15mdataloader[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mbuild_nlp_train_loader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mdataset[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m        [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mRWKVDataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_dir[39m[38;5;197m=[39m[38;5;15mdatafile[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mepoch_length_fixed[39m[38;5;197m=[39m[38;5;141m9996[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# train.train_iter=3[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_epoch[39m[38;5;197m=[39m[38;5;141m1[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186moutput/rwkv_output_loss_compare[39m[38;5;186m"[39m
[38;5;242m# train.load_weight = "/home/zhangxiaoyu/RWKV-LM/libai/projects/RWKV_v4/model/output_model/" # 采用同一个model进行初始化[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mrdma_enabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# model.cfg.hidden_dropout_prob= 0.0 # 关闭所有的dropout[39m
[38;5;242m# model.cfg.attention_probs_dropout_prob= 0.0[39m
[38;5;242m# model.cfg.bias_dropout_fusion= False[39m

[38;5;242m# train.dist.pipeline_parallel_size=2[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mevaluation[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# train.train_iter=5[39m
[38;5;242m# train.dist.tensor_parallel_size = 2  # 并行度为 4 的模型并行[39m
[38;5;242m# train.dist.tensor_parallel_size = 4  # 并行度为 4 的模型并行[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mactivation_checkpoint[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m [39m

[08/23 10:39:30] libai.engine.default INFO: Prepare training, validating, testing set
[08/23 10:39:32] libai.engine.default INFO: Auto-scaling the config to train.train_iter=10000, train.warmup_iter=0
[08/23 10:39:36] libai.engine.default INFO: Model:
GPT(
  (emb): VocabEmbedding(num_embeddings=6064, embedding_dim=1024)
  (blocks): Sequential(
    (0): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln0): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (1): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (2): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (3): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (4): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (5): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
  )
  (ln_out): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
  (head): Linear1D(in_features=1024, out_features=6064, bias=False, parallel=row)
  (head_q): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
  (head_k): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
)
[08/23 10:39:36] libai.engine.trainer INFO: Starting training from iteration 0
[08/23 10:39:37] libai.models.utils.graph_base INFO: Start compling the train graph which may take some time. Please wait for a moment ...
[08/24 01:00:51] libai INFO: Rank of current process: 1. World size: 2
[08/24 01:00:51] libai INFO: Command line arguments: Namespace(config_file='projects/RWKV_v4/configs/config_test.py', eval_only=False, fast_dev_run=False, opts=[], resume=False)
[08/24 01:00:51] libai INFO: Contents of args.config_file=projects/RWKV_v4/configs/config_test.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_config[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mtokenizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT2Tokenizer[39m
[38;5;242m# 配置 dataloader `build_image_train_loader` 和 `build_image_test_loader` 是 LiBai 提供的用于创建图像数据的训练集和测试集 DataLoader 的两个函数[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_nlp_test_loader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_nlp_train_loader[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15moneflow[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mflow[39m

[38;5;242m# 配置 model[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmodel[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT[39m[38;5;15m [39m[38;5;15m,[39m[38;5;15mGPTConfig[39m
[38;5;242m# 导入自定义的 dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mdataset[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mRWKVDataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mutils[39m[38;5;15m.[39m[38;5;15mconfig_optimizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_RWKV_v4_config_optim[39m


[38;5;15mtest[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15menable[39m[38;5;197m=[39m[38;5;81mFalse[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mweight_style[39m[38;5;197m=[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;186m"[39m[38;5;186mpytorch[39m[38;5;186m"[39m
[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mpath[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/RWKV-v4/for_load.pth[39m[38;5;186m"[39m

[38;5;15mgraph[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/models/graph.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mgraph[39m

[38;5;15mgraph[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;242m# optim = get_config("common/optim.py").optim[39m
[38;5;15moptim[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mAdam[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mparams[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mget_RWKV_v4_config_optim[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr[39m[38;5;197m=[39m[38;5;141m8e-4[39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;242m# 配置model[39m
[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mGPT[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mvocab_size[39m[38;5;197m=[39m[38;5;141m6064[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mmodel_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mRWKV[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_layer[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_embd[39m[38;5;197m=[39m[38;5;141m1024[39m
[38;5;15m)[39m

[38;5;242m# 训练过程[39m
[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/train.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mtrain[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minput_placement_device[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mcpu[39m[38;5;186m"[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mdist[39m[38;5;197m.[39m[38;5;15mpipeline_num_layers[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m6[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_micro_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mscheduler[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mlr_scheduler[39m[38;5;197m.[39m[38;5;15mStepLR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mstep_size[39m[38;5;197m=[39m[38;5;141m1000[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m        [39m[38;5;15mgamma[39m[38;5;197m=[39m[38;5;141m1.0[39m
[38;5;15m)[39m[38;5;15m [39m

[38;5;242m# false = fp32[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mdatafile[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/data/enwik8[39m[38;5;186m"[39m
[38;5;242m# 获得一个 DataLoader 的配置对象[39m
[38;5;15mdataloader[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mbuild_nlp_train_loader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mdataset[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m        [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mRWKVDataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_dir[39m[38;5;197m=[39m[38;5;15mdatafile[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mepoch_length_fixed[39m[38;5;197m=[39m[38;5;141m9996[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# train.train_iter=3[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_epoch[39m[38;5;197m=[39m[38;5;141m1[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186moutput/rwkv_output_loss_compare[39m[38;5;186m"[39m
[38;5;242m# train.load_weight = "/home/zhangxiaoyu/RWKV-LM/libai/projects/RWKV_v4/model/output_model/" # 采用同一个model进行初始化[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mrdma_enabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# model.cfg.hidden_dropout_prob= 0.0 # 关闭所有的dropout[39m
[38;5;242m# model.cfg.attention_probs_dropout_prob= 0.0[39m
[38;5;242m# model.cfg.bias_dropout_fusion= False[39m

[38;5;242m# train.dist.pipeline_parallel_size=2[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mevaluation[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# train.train_iter=5[39m
[38;5;242m# train.dist.tensor_parallel_size = 2  # 并行度为 4 的模型并行[39m
[38;5;242m# train.dist.tensor_parallel_size = 4  # 并行度为 4 的模型并行[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mactivation_checkpoint[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m [39m

[08/24 01:00:51] libai.engine.default INFO: Prepare training, validating, testing set
[08/24 01:00:53] libai.engine.default INFO: Auto-scaling the config to train.train_iter=10000, train.warmup_iter=0
[08/24 01:00:57] libai.engine.default INFO: Model:
GPT(
  (emb): VocabEmbedding(num_embeddings=6064, embedding_dim=1024)
  (blocks): Sequential(
    (0): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln0): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (1): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (2): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (3): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (4): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (5): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
  )
  (ln_out): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
  (head): Linear1D(in_features=1024, out_features=6064, bias=False, parallel=row)
  (head_q): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
  (head_k): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
)
[08/24 01:00:57] libai.engine.trainer INFO: Starting training from iteration 0
[08/24 01:00:57] libai.models.utils.graph_base INFO: Start compling the train graph which may take some time. Please wait for a moment ...
[08/24 01:04:41] libai INFO: Rank of current process: 1. World size: 2
[08/24 01:04:41] libai INFO: Command line arguments: Namespace(config_file='projects/RWKV_v4/configs/config_test.py', eval_only=False, fast_dev_run=False, opts=[], resume=False)
[08/24 01:04:41] libai INFO: Contents of args.config_file=projects/RWKV_v4/configs/config_test.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_config[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mtokenizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT2Tokenizer[39m
[38;5;242m# 配置 dataloader `build_image_train_loader` 和 `build_image_test_loader` 是 LiBai 提供的用于创建图像数据的训练集和测试集 DataLoader 的两个函数[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_nlp_test_loader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_nlp_train_loader[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15moneflow[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mflow[39m

[38;5;242m# 配置 model[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmodel[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT[39m[38;5;15m [39m[38;5;15m,[39m[38;5;15mGPTConfig[39m
[38;5;242m# 导入自定义的 dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mdataset[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mRWKVDataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mutils[39m[38;5;15m.[39m[38;5;15mconfig_optimizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_RWKV_v4_config_optim[39m


[38;5;15mtest[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15menable[39m[38;5;197m=[39m[38;5;81mFalse[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mweight_style[39m[38;5;197m=[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;186m"[39m[38;5;186mpytorch[39m[38;5;186m"[39m
[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mpath[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/RWKV-v4/for_load.pth[39m[38;5;186m"[39m

[38;5;15mgraph[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/models/graph.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mgraph[39m

[38;5;15mgraph[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;242m# optim = get_config("common/optim.py").optim[39m
[38;5;15moptim[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mAdam[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mparams[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mget_RWKV_v4_config_optim[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr[39m[38;5;197m=[39m[38;5;141m8e-4[39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;242m# 配置model[39m
[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mGPT[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mvocab_size[39m[38;5;197m=[39m[38;5;141m6064[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mmodel_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mRWKV[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_layer[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_embd[39m[38;5;197m=[39m[38;5;141m1024[39m
[38;5;15m)[39m

[38;5;242m# 训练过程[39m
[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/train.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mtrain[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minput_placement_device[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mcpu[39m[38;5;186m"[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mdist[39m[38;5;197m.[39m[38;5;15mpipeline_num_layers[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m6[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_micro_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mscheduler[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mlr_scheduler[39m[38;5;197m.[39m[38;5;15mStepLR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mstep_size[39m[38;5;197m=[39m[38;5;141m1000[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m        [39m[38;5;15mgamma[39m[38;5;197m=[39m[38;5;141m1.0[39m
[38;5;15m)[39m[38;5;15m [39m

[38;5;242m# false = fp32[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mdatafile[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/data/enwik8[39m[38;5;186m"[39m
[38;5;242m# 获得一个 DataLoader 的配置对象[39m
[38;5;15mdataloader[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mbuild_nlp_train_loader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mdataset[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m        [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mRWKVDataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_dir[39m[38;5;197m=[39m[38;5;15mdatafile[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mepoch_length_fixed[39m[38;5;197m=[39m[38;5;141m9996[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# train.train_iter=3[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_epoch[39m[38;5;197m=[39m[38;5;141m1[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186moutput/rwkv_output_loss_compare[39m[38;5;186m"[39m
[38;5;242m# train.load_weight = "/home/zhangxiaoyu/RWKV-LM/libai/projects/RWKV_v4/model/output_model/" # 采用同一个model进行初始化[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mrdma_enabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# model.cfg.hidden_dropout_prob= 0.0 # 关闭所有的dropout[39m
[38;5;242m# model.cfg.attention_probs_dropout_prob= 0.0[39m
[38;5;242m# model.cfg.bias_dropout_fusion= False[39m

[38;5;242m# train.dist.pipeline_parallel_size=2[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mevaluation[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# train.train_iter=5[39m
[38;5;242m# train.dist.tensor_parallel_size = 2  # 并行度为 4 的模型并行[39m
[38;5;242m# train.dist.tensor_parallel_size = 4  # 并行度为 4 的模型并行[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mactivation_checkpoint[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m [39m

[08/24 01:04:41] libai.engine.default INFO: Prepare training, validating, testing set
[08/24 01:04:43] libai.engine.default INFO: Auto-scaling the config to train.train_iter=10000, train.warmup_iter=0
[08/24 01:04:47] libai.engine.default INFO: Model:
GPT(
  (emb): VocabEmbedding(num_embeddings=6064, embedding_dim=1024)
  (blocks): Sequential(
    (0): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln0): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (1): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (2): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (3): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (4): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (5): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
  )
  (ln_out): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
  (head): Linear1D(in_features=1024, out_features=6064, bias=False, parallel=row)
  (head_q): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
  (head_k): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
)
[08/24 01:04:47] libai.engine.trainer INFO: Starting training from iteration 0
[08/24 01:04:47] libai.models.utils.graph_base INFO: Start compling the train graph which may take some time. Please wait for a moment ...
[08/24 01:07:07] libai INFO: Rank of current process: 1. World size: 2
[08/24 01:07:07] libai INFO: Command line arguments: Namespace(config_file='projects/RWKV_v4/configs/config_test.py', eval_only=False, fast_dev_run=False, opts=[], resume=False)
[08/24 01:07:07] libai INFO: Contents of args.config_file=projects/RWKV_v4/configs/config_test.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_config[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mtokenizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT2Tokenizer[39m
[38;5;242m# 配置 dataloader `build_image_train_loader` 和 `build_image_test_loader` 是 LiBai 提供的用于创建图像数据的训练集和测试集 DataLoader 的两个函数[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_nlp_test_loader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_nlp_train_loader[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15moneflow[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mflow[39m

[38;5;242m# 配置 model[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmodel[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT[39m[38;5;15m [39m[38;5;15m,[39m[38;5;15mGPTConfig[39m
[38;5;242m# 导入自定义的 dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mdataset[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mRWKVDataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mutils[39m[38;5;15m.[39m[38;5;15mconfig_optimizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_RWKV_v4_config_optim[39m


[38;5;15mtest[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15menable[39m[38;5;197m=[39m[38;5;81mFalse[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mweight_style[39m[38;5;197m=[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;186m"[39m[38;5;186mpytorch[39m[38;5;186m"[39m
[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mpath[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/RWKV-v4/for_load.pth[39m[38;5;186m"[39m

[38;5;15mgraph[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/models/graph.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mgraph[39m

[38;5;15mgraph[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;242m# optim = get_config("common/optim.py").optim[39m
[38;5;15moptim[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mAdam[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mparams[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mget_RWKV_v4_config_optim[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr[39m[38;5;197m=[39m[38;5;141m8e-4[39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;242m# 配置model[39m
[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mGPT[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mvocab_size[39m[38;5;197m=[39m[38;5;141m6064[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mmodel_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mRWKV[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_layer[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_embd[39m[38;5;197m=[39m[38;5;141m1024[39m
[38;5;15m)[39m

[38;5;242m# 训练过程[39m
[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/train.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mtrain[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minput_placement_device[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mcpu[39m[38;5;186m"[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mdist[39m[38;5;197m.[39m[38;5;15mpipeline_num_layers[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m6[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_micro_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mscheduler[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mlr_scheduler[39m[38;5;197m.[39m[38;5;15mStepLR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mstep_size[39m[38;5;197m=[39m[38;5;141m1000[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m        [39m[38;5;15mgamma[39m[38;5;197m=[39m[38;5;141m1.0[39m
[38;5;15m)[39m[38;5;15m [39m

[38;5;242m# false = fp32[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mdatafile[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/data/enwik8[39m[38;5;186m"[39m
[38;5;242m# 获得一个 DataLoader 的配置对象[39m
[38;5;15mdataloader[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mbuild_nlp_train_loader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mdataset[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m        [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mRWKVDataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_dir[39m[38;5;197m=[39m[38;5;15mdatafile[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mepoch_length_fixed[39m[38;5;197m=[39m[38;5;141m9996[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# train.train_iter=3[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_epoch[39m[38;5;197m=[39m[38;5;141m1[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186moutput/rwkv_output_loss_compare[39m[38;5;186m"[39m
[38;5;242m# train.load_weight = "/home/zhangxiaoyu/RWKV-LM/libai/projects/RWKV_v4/model/output_model/" # 采用同一个model进行初始化[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mrdma_enabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# model.cfg.hidden_dropout_prob= 0.0 # 关闭所有的dropout[39m
[38;5;242m# model.cfg.attention_probs_dropout_prob= 0.0[39m
[38;5;242m# model.cfg.bias_dropout_fusion= False[39m

[38;5;242m# train.dist.pipeline_parallel_size=2[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mevaluation[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# train.train_iter=5[39m
[38;5;242m# train.dist.tensor_parallel_size = 2  # 并行度为 4 的模型并行[39m
[38;5;242m# train.dist.tensor_parallel_size = 4  # 并行度为 4 的模型并行[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mactivation_checkpoint[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m [39m

[08/24 01:07:07] libai.engine.default INFO: Prepare training, validating, testing set
[08/24 01:07:09] libai.engine.default INFO: Auto-scaling the config to train.train_iter=10000, train.warmup_iter=0
[08/24 01:07:13] libai.engine.default INFO: Model:
GPT(
  (emb): VocabEmbedding(num_embeddings=6064, embedding_dim=1024)
  (blocks): Sequential(
    (0): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln0): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (1): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (2): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (3): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (4): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (5): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
  )
  (ln_out): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
  (head): Linear1D(in_features=1024, out_features=6064, bias=False, parallel=row)
  (head_q): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
  (head_k): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
)
[08/24 01:07:13] libai.engine.trainer INFO: Starting training from iteration 0
[08/24 01:07:14] libai.models.utils.graph_base INFO: Start compling the train graph which may take some time. Please wait for a moment ...
[08/24 01:08:35] libai INFO: Rank of current process: 1. World size: 2
[08/24 01:08:35] libai INFO: Command line arguments: Namespace(config_file='projects/RWKV_v4/configs/config_test.py', eval_only=False, fast_dev_run=False, opts=[], resume=False)
[08/24 01:08:35] libai INFO: Contents of args.config_file=projects/RWKV_v4/configs/config_test.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_config[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mtokenizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT2Tokenizer[39m
[38;5;242m# 配置 dataloader `build_image_train_loader` 和 `build_image_test_loader` 是 LiBai 提供的用于创建图像数据的训练集和测试集 DataLoader 的两个函数[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_nlp_test_loader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_nlp_train_loader[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15moneflow[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mflow[39m

[38;5;242m# 配置 model[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmodel[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT[39m[38;5;15m [39m[38;5;15m,[39m[38;5;15mGPTConfig[39m
[38;5;242m# 导入自定义的 dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mdataset[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mRWKVDataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mutils[39m[38;5;15m.[39m[38;5;15mconfig_optimizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_RWKV_v4_config_optim[39m


[38;5;15mtest[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15menable[39m[38;5;197m=[39m[38;5;81mFalse[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mweight_style[39m[38;5;197m=[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;186m"[39m[38;5;186mpytorch[39m[38;5;186m"[39m
[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mpath[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/RWKV-v4/for_load.pth[39m[38;5;186m"[39m

[38;5;15mgraph[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/models/graph.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mgraph[39m

[38;5;15mgraph[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;242m# optim = get_config("common/optim.py").optim[39m
[38;5;15moptim[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mAdam[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mparams[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mget_RWKV_v4_config_optim[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr[39m[38;5;197m=[39m[38;5;141m8e-4[39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;242m# 配置model[39m
[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mGPT[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mvocab_size[39m[38;5;197m=[39m[38;5;141m6064[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mmodel_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mRWKV[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_layer[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_embd[39m[38;5;197m=[39m[38;5;141m1024[39m
[38;5;15m)[39m

[38;5;242m# 训练过程[39m
[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/train.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mtrain[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minput_placement_device[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mcpu[39m[38;5;186m"[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mdist[39m[38;5;197m.[39m[38;5;15mpipeline_num_layers[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m6[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_micro_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mscheduler[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mlr_scheduler[39m[38;5;197m.[39m[38;5;15mStepLR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mstep_size[39m[38;5;197m=[39m[38;5;141m1000[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m        [39m[38;5;15mgamma[39m[38;5;197m=[39m[38;5;141m1.0[39m
[38;5;15m)[39m[38;5;15m [39m

[38;5;242m# false = fp32[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mdatafile[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/data/enwik8[39m[38;5;186m"[39m
[38;5;242m# 获得一个 DataLoader 的配置对象[39m
[38;5;15mdataloader[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mbuild_nlp_train_loader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mdataset[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m        [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mRWKVDataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_dir[39m[38;5;197m=[39m[38;5;15mdatafile[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mepoch_length_fixed[39m[38;5;197m=[39m[38;5;141m9996[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# train.train_iter=3[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_epoch[39m[38;5;197m=[39m[38;5;141m1[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186moutput/rwkv_output_loss_compare[39m[38;5;186m"[39m
[38;5;242m# train.load_weight = "/home/zhangxiaoyu/RWKV-LM/libai/projects/RWKV_v4/model/output_model/" # 采用同一个model进行初始化[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mrdma_enabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# model.cfg.hidden_dropout_prob= 0.0 # 关闭所有的dropout[39m
[38;5;242m# model.cfg.attention_probs_dropout_prob= 0.0[39m
[38;5;242m# model.cfg.bias_dropout_fusion= False[39m

[38;5;242m# train.dist.pipeline_parallel_size=2[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mevaluation[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# train.train_iter=5[39m
[38;5;242m# train.dist.tensor_parallel_size = 2  # 并行度为 4 的模型并行[39m
[38;5;242m# train.dist.tensor_parallel_size = 4  # 并行度为 4 的模型并行[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mactivation_checkpoint[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m [39m

[08/24 01:08:35] libai.engine.default INFO: Prepare training, validating, testing set
[08/24 01:08:37] libai.engine.default INFO: Auto-scaling the config to train.train_iter=10000, train.warmup_iter=0
[08/24 01:08:41] libai.engine.default INFO: Model:
GPT(
  (emb): VocabEmbedding(num_embeddings=6064, embedding_dim=1024)
  (blocks): Sequential(
    (0): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln0): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (1): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (2): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (3): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (4): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (5): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
  )
  (ln_out): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
  (head): Linear1D(in_features=1024, out_features=6064, bias=False, parallel=row)
  (head_q): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
  (head_k): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
)
[08/24 01:08:41] libai.engine.trainer INFO: Starting training from iteration 0
[08/24 01:08:42] libai.models.utils.graph_base INFO: Start compling the train graph which may take some time. Please wait for a moment ...
[08/24 01:11:08] libai INFO: Rank of current process: 1. World size: 2
[08/24 01:11:08] libai INFO: Command line arguments: Namespace(config_file='projects/RWKV_v4/configs/config_test.py', eval_only=False, fast_dev_run=False, opts=[], resume=False)
[08/24 01:11:08] libai INFO: Contents of args.config_file=projects/RWKV_v4/configs/config_test.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_config[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mtokenizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT2Tokenizer[39m
[38;5;242m# 配置 dataloader `build_image_train_loader` 和 `build_image_test_loader` 是 LiBai 提供的用于创建图像数据的训练集和测试集 DataLoader 的两个函数[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_nlp_test_loader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_nlp_train_loader[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15moneflow[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mflow[39m

[38;5;242m# 配置 model[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmodel[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT[39m[38;5;15m [39m[38;5;15m,[39m[38;5;15mGPTConfig[39m
[38;5;242m# 导入自定义的 dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mdataset[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mRWKVDataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mutils[39m[38;5;15m.[39m[38;5;15mconfig_optimizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_RWKV_v4_config_optim[39m


[38;5;15mtest[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15menable[39m[38;5;197m=[39m[38;5;81mFalse[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mweight_style[39m[38;5;197m=[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;186m"[39m[38;5;186mpytorch[39m[38;5;186m"[39m
[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mpath[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/RWKV-v4/for_load.pth[39m[38;5;186m"[39m

[38;5;15mgraph[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/models/graph.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mgraph[39m

[38;5;15mgraph[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;242m# optim = get_config("common/optim.py").optim[39m
[38;5;15moptim[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mAdam[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mparams[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mget_RWKV_v4_config_optim[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr[39m[38;5;197m=[39m[38;5;141m8e-4[39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;242m# 配置model[39m
[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mGPT[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mvocab_size[39m[38;5;197m=[39m[38;5;141m6064[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mmodel_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mRWKV[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_layer[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_embd[39m[38;5;197m=[39m[38;5;141m1024[39m
[38;5;15m)[39m

[38;5;242m# 训练过程[39m
[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/train.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mtrain[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minput_placement_device[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mcpu[39m[38;5;186m"[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mdist[39m[38;5;197m.[39m[38;5;15mpipeline_num_layers[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m6[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_micro_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mscheduler[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mlr_scheduler[39m[38;5;197m.[39m[38;5;15mStepLR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mstep_size[39m[38;5;197m=[39m[38;5;141m1000[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m        [39m[38;5;15mgamma[39m[38;5;197m=[39m[38;5;141m1.0[39m
[38;5;15m)[39m[38;5;15m [39m

[38;5;242m# false = fp32[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mdatafile[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/data/enwik8[39m[38;5;186m"[39m
[38;5;242m# 获得一个 DataLoader 的配置对象[39m
[38;5;15mdataloader[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mbuild_nlp_train_loader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mdataset[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m        [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mRWKVDataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_dir[39m[38;5;197m=[39m[38;5;15mdatafile[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mepoch_length_fixed[39m[38;5;197m=[39m[38;5;141m9996[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# train.train_iter=3[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_epoch[39m[38;5;197m=[39m[38;5;141m1[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186moutput/rwkv_output_loss_compare[39m[38;5;186m"[39m
[38;5;242m# train.load_weight = "/home/zhangxiaoyu/RWKV-LM/libai/projects/RWKV_v4/model/output_model/" # 采用同一个model进行初始化[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mrdma_enabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# model.cfg.hidden_dropout_prob= 0.0 # 关闭所有的dropout[39m
[38;5;242m# model.cfg.attention_probs_dropout_prob= 0.0[39m
[38;5;242m# model.cfg.bias_dropout_fusion= False[39m

[38;5;242m# train.dist.pipeline_parallel_size=2[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mevaluation[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# train.train_iter=5[39m
[38;5;242m# train.dist.tensor_parallel_size = 2  # 并行度为 4 的模型并行[39m
[38;5;242m# train.dist.tensor_parallel_size = 4  # 并行度为 4 的模型并行[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mactivation_checkpoint[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m [39m

[08/24 01:11:08] libai.engine.default INFO: Prepare training, validating, testing set
[08/24 01:11:10] libai.engine.default INFO: Auto-scaling the config to train.train_iter=10000, train.warmup_iter=0
[08/24 01:11:13] libai.engine.default INFO: Model:
GPT(
  (emb): VocabEmbedding(num_embeddings=6064, embedding_dim=1024)
  (blocks): Sequential(
    (0): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln0): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (1): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (2): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (3): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (4): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (5): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
  )
  (ln_out): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
  (head): Linear1D(in_features=1024, out_features=6064, bias=False, parallel=row)
  (head_q): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
  (head_k): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
)
[08/24 01:11:14] libai.engine.trainer INFO: Starting training from iteration 0
[08/24 01:11:14] libai.models.utils.graph_base INFO: Start compling the train graph which may take some time. Please wait for a moment ...
[08/24 01:37:19] libai INFO: Rank of current process: 1. World size: 2
[08/24 01:37:19] libai INFO: Command line arguments: Namespace(config_file='projects/RWKV_v4/configs/config_test.py', eval_only=False, fast_dev_run=False, opts=[], resume=False)
[08/24 01:37:19] libai INFO: Contents of args.config_file=projects/RWKV_v4/configs/config_test.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_config[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mtokenizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT2Tokenizer[39m
[38;5;242m# 配置 dataloader `build_image_train_loader` 和 `build_image_test_loader` 是 LiBai 提供的用于创建图像数据的训练集和测试集 DataLoader 的两个函数[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_nlp_test_loader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_nlp_train_loader[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15moneflow[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mflow[39m

[38;5;242m# 配置 model[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmodel[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT[39m[38;5;15m [39m[38;5;15m,[39m[38;5;15mGPTConfig[39m
[38;5;242m# 导入自定义的 dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mdataset[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mRWKVDataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mutils[39m[38;5;15m.[39m[38;5;15mconfig_optimizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_RWKV_v4_config_optim[39m


[38;5;15mtest[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15menable[39m[38;5;197m=[39m[38;5;81mFalse[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mweight_style[39m[38;5;197m=[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;186m"[39m[38;5;186mpytorch[39m[38;5;186m"[39m
[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mpath[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/RWKV-v4/for_load.pth[39m[38;5;186m"[39m

[38;5;15mgraph[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/models/graph.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mgraph[39m

[38;5;15mgraph[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;242m# optim = get_config("common/optim.py").optim[39m
[38;5;15moptim[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mAdam[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mparams[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mget_RWKV_v4_config_optim[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr[39m[38;5;197m=[39m[38;5;141m8e-4[39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;242m# 配置model[39m
[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mGPT[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mvocab_size[39m[38;5;197m=[39m[38;5;141m6064[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mmodel_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mRWKV[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_layer[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_embd[39m[38;5;197m=[39m[38;5;141m1024[39m
[38;5;15m)[39m

[38;5;242m# 训练过程[39m
[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/train.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mtrain[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minput_placement_device[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mcpu[39m[38;5;186m"[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mdist[39m[38;5;197m.[39m[38;5;15mpipeline_num_layers[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m6[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_micro_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mscheduler[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mlr_scheduler[39m[38;5;197m.[39m[38;5;15mStepLR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mstep_size[39m[38;5;197m=[39m[38;5;141m1000[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m        [39m[38;5;15mgamma[39m[38;5;197m=[39m[38;5;141m1.0[39m
[38;5;15m)[39m[38;5;15m [39m

[38;5;242m# false = fp32[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mdatafile[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/data/enwik8[39m[38;5;186m"[39m
[38;5;242m# 获得一个 DataLoader 的配置对象[39m
[38;5;15mdataloader[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mbuild_nlp_train_loader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mdataset[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m        [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mRWKVDataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_dir[39m[38;5;197m=[39m[38;5;15mdatafile[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mepoch_length_fixed[39m[38;5;197m=[39m[38;5;141m9996[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# train.train_iter=3[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_epoch[39m[38;5;197m=[39m[38;5;141m1[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186moutput/rwkv_output_loss_compare[39m[38;5;186m"[39m
[38;5;242m# train.load_weight = "/home/zhangxiaoyu/RWKV-LM/libai/projects/RWKV_v4/model/output_model/" # 采用同一个model进行初始化[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mrdma_enabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# model.cfg.hidden_dropout_prob= 0.0 # 关闭所有的dropout[39m
[38;5;242m# model.cfg.attention_probs_dropout_prob= 0.0[39m
[38;5;242m# model.cfg.bias_dropout_fusion= False[39m

[38;5;242m# train.dist.pipeline_parallel_size=2[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mevaluation[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# train.train_iter=5[39m
[38;5;242m# train.dist.tensor_parallel_size = 2  # 并行度为 4 的模型并行[39m
[38;5;242m# train.dist.tensor_parallel_size = 4  # 并行度为 4 的模型并行[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mactivation_checkpoint[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m [39m

[08/24 01:37:19] libai.engine.default INFO: Prepare training, validating, testing set
[08/24 01:37:21] libai.engine.default INFO: Auto-scaling the config to train.train_iter=10000, train.warmup_iter=0
[08/24 01:37:26] libai.engine.default INFO: Model:
GPT(
  (emb): VocabEmbedding(num_embeddings=6064, embedding_dim=1024)
  (blocks): Sequential(
    (0): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln0): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (1): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (2): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (3): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (4): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (5): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
  )
  (ln_out): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
  (head): Linear1D(in_features=1024, out_features=6064, bias=False, parallel=row)
  (head_q): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
  (head_k): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
)
[08/24 01:37:26] libai.engine.trainer INFO: Starting training from iteration 0
[08/24 01:37:26] libai.models.utils.graph_base INFO: Start compling the train graph which may take some time. Please wait for a moment ...
[08/24 01:37:59] libai INFO: Rank of current process: 1. World size: 2
[08/24 01:37:59] libai INFO: Command line arguments: Namespace(config_file='projects/RWKV_v4/configs/config_test.py', eval_only=False, fast_dev_run=False, opts=[], resume=False)
[08/24 01:37:59] libai INFO: Contents of args.config_file=projects/RWKV_v4/configs/config_test.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_config[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mtokenizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT2Tokenizer[39m
[38;5;242m# 配置 dataloader `build_image_train_loader` 和 `build_image_test_loader` 是 LiBai 提供的用于创建图像数据的训练集和测试集 DataLoader 的两个函数[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_nlp_test_loader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_nlp_train_loader[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15moneflow[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mflow[39m

[38;5;242m# 配置 model[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmodel[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT[39m[38;5;15m [39m[38;5;15m,[39m[38;5;15mGPTConfig[39m
[38;5;242m# 导入自定义的 dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mdataset[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mRWKVDataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mutils[39m[38;5;15m.[39m[38;5;15mconfig_optimizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_RWKV_v4_config_optim[39m


[38;5;15mtest[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15menable[39m[38;5;197m=[39m[38;5;81mFalse[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mweight_style[39m[38;5;197m=[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;186m"[39m[38;5;186mpytorch[39m[38;5;186m"[39m
[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mpath[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/RWKV-v4/for_load.pth[39m[38;5;186m"[39m

[38;5;15mgraph[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/models/graph.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mgraph[39m

[38;5;15mgraph[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;242m# optim = get_config("common/optim.py").optim[39m
[38;5;15moptim[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mAdam[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mparams[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mget_RWKV_v4_config_optim[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr[39m[38;5;197m=[39m[38;5;141m8e-4[39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;242m# 配置model[39m
[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mGPT[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mvocab_size[39m[38;5;197m=[39m[38;5;141m6064[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mmodel_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mRWKV[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_layer[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_embd[39m[38;5;197m=[39m[38;5;141m1024[39m
[38;5;15m)[39m

[38;5;242m# 训练过程[39m
[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/train.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mtrain[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minput_placement_device[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mcpu[39m[38;5;186m"[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mdist[39m[38;5;197m.[39m[38;5;15mpipeline_num_layers[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m6[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_micro_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mscheduler[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mlr_scheduler[39m[38;5;197m.[39m[38;5;15mStepLR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mstep_size[39m[38;5;197m=[39m[38;5;141m1000[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m        [39m[38;5;15mgamma[39m[38;5;197m=[39m[38;5;141m1.0[39m
[38;5;15m)[39m[38;5;15m [39m

[38;5;242m# false = fp32[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mdatafile[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/data/enwik8[39m[38;5;186m"[39m
[38;5;242m# 获得一个 DataLoader 的配置对象[39m
[38;5;15mdataloader[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mbuild_nlp_train_loader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mdataset[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m        [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mRWKVDataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_dir[39m[38;5;197m=[39m[38;5;15mdatafile[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mepoch_length_fixed[39m[38;5;197m=[39m[38;5;141m9996[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# train.train_iter=3[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_epoch[39m[38;5;197m=[39m[38;5;141m1[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186moutput/rwkv_output_loss_compare[39m[38;5;186m"[39m
[38;5;242m# train.load_weight = "/home/zhangxiaoyu/RWKV-LM/libai/projects/RWKV_v4/model/output_model/" # 采用同一个model进行初始化[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mrdma_enabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# model.cfg.hidden_dropout_prob= 0.0 # 关闭所有的dropout[39m
[38;5;242m# model.cfg.attention_probs_dropout_prob= 0.0[39m
[38;5;242m# model.cfg.bias_dropout_fusion= False[39m

[38;5;242m# train.dist.pipeline_parallel_size=2[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mevaluation[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# train.train_iter=5[39m
[38;5;242m# train.dist.tensor_parallel_size = 2  # 并行度为 4 的模型并行[39m
[38;5;242m# train.dist.tensor_parallel_size = 4  # 并行度为 4 的模型并行[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mactivation_checkpoint[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m [39m

[08/24 01:38:00] libai.engine.default INFO: Prepare training, validating, testing set
[08/24 01:38:01] libai.engine.default INFO: Auto-scaling the config to train.train_iter=10000, train.warmup_iter=0
[08/24 01:38:05] libai.engine.default INFO: Model:
GPT(
  (emb): VocabEmbedding(num_embeddings=6064, embedding_dim=1024)
  (blocks): Sequential(
    (0): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln0): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (1): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (2): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (3): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (4): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (5): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
  )
  (ln_out): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
  (head): Linear1D(in_features=1024, out_features=6064, bias=False, parallel=row)
  (head_q): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
  (head_k): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
)
[08/24 01:38:06] libai.engine.trainer INFO: Starting training from iteration 0
[08/24 01:38:06] libai.models.utils.graph_base INFO: Start compling the train graph which may take some time. Please wait for a moment ...
[08/24 01:43:42] libai INFO: Rank of current process: 1. World size: 2
[08/24 01:43:42] libai INFO: Command line arguments: Namespace(config_file='projects/RWKV_v4/configs/config_test.py', eval_only=False, fast_dev_run=False, opts=[], resume=False)
[08/24 01:43:42] libai INFO: Contents of args.config_file=projects/RWKV_v4/configs/config_test.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_config[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mtokenizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT2Tokenizer[39m
[38;5;242m# 配置 dataloader `build_image_train_loader` 和 `build_image_test_loader` 是 LiBai 提供的用于创建图像数据的训练集和测试集 DataLoader 的两个函数[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_nlp_test_loader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_nlp_train_loader[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15moneflow[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mflow[39m

[38;5;242m# 配置 model[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmodel[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT[39m[38;5;15m [39m[38;5;15m,[39m[38;5;15mGPTConfig[39m
[38;5;242m# 导入自定义的 dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mdataset[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mRWKVDataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mutils[39m[38;5;15m.[39m[38;5;15mconfig_optimizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_RWKV_v4_config_optim[39m


[38;5;15mtest[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15menable[39m[38;5;197m=[39m[38;5;81mFalse[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mweight_style[39m[38;5;197m=[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;186m"[39m[38;5;186mpytorch[39m[38;5;186m"[39m
[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mpath[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/RWKV-v4/for_load.pth[39m[38;5;186m"[39m

[38;5;15mgraph[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/models/graph.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mgraph[39m

[38;5;15mgraph[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;242m# optim = get_config("common/optim.py").optim[39m
[38;5;15moptim[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mAdam[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mparams[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mget_RWKV_v4_config_optim[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr[39m[38;5;197m=[39m[38;5;141m8e-4[39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;242m# 配置model[39m
[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mGPT[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mvocab_size[39m[38;5;197m=[39m[38;5;141m6064[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mmodel_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mRWKV[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_layer[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_embd[39m[38;5;197m=[39m[38;5;141m1024[39m
[38;5;15m)[39m

[38;5;242m# 训练过程[39m
[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/train.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mtrain[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minput_placement_device[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mcpu[39m[38;5;186m"[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mdist[39m[38;5;197m.[39m[38;5;15mpipeline_num_layers[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m6[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_micro_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mscheduler[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mlr_scheduler[39m[38;5;197m.[39m[38;5;15mStepLR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mstep_size[39m[38;5;197m=[39m[38;5;141m1000[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m        [39m[38;5;15mgamma[39m[38;5;197m=[39m[38;5;141m1.0[39m
[38;5;15m)[39m[38;5;15m [39m

[38;5;242m# false = fp32[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mdatafile[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/data/enwik8[39m[38;5;186m"[39m
[38;5;242m# 获得一个 DataLoader 的配置对象[39m
[38;5;15mdataloader[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mbuild_nlp_train_loader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mdataset[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m        [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mRWKVDataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_dir[39m[38;5;197m=[39m[38;5;15mdatafile[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mepoch_length_fixed[39m[38;5;197m=[39m[38;5;141m9996[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# train.train_iter=3[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_epoch[39m[38;5;197m=[39m[38;5;141m1[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186moutput/rwkv_output_loss_compare[39m[38;5;186m"[39m
[38;5;242m# train.load_weight = "/home/zhangxiaoyu/RWKV-LM/libai/projects/RWKV_v4/model/output_model/" # 采用同一个model进行初始化[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mrdma_enabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# model.cfg.hidden_dropout_prob= 0.0 # 关闭所有的dropout[39m
[38;5;242m# model.cfg.attention_probs_dropout_prob= 0.0[39m
[38;5;242m# model.cfg.bias_dropout_fusion= False[39m

[38;5;242m# train.dist.pipeline_parallel_size=2[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mevaluation[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# train.train_iter=5[39m
[38;5;242m# train.dist.tensor_parallel_size = 2  # 并行度为 4 的模型并行[39m
[38;5;242m# train.dist.tensor_parallel_size = 4  # 并行度为 4 的模型并行[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mactivation_checkpoint[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m [39m

[08/24 01:43:42] libai.engine.default INFO: Prepare training, validating, testing set
[08/24 01:43:44] libai.engine.default INFO: Auto-scaling the config to train.train_iter=10000, train.warmup_iter=0
[08/24 01:43:48] libai.engine.default INFO: Model:
GPT(
  (emb): VocabEmbedding(num_embeddings=6064, embedding_dim=1024)
  (blocks): Sequential(
    (0): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln0): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (1): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (2): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (3): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (4): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (5): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
  )
  (ln_out): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
  (head): Linear1D(in_features=1024, out_features=6064, bias=False, parallel=row)
  (head_q): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
  (head_k): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
)
[08/24 01:43:48] libai.engine.trainer INFO: Starting training from iteration 0
[08/24 01:43:49] libai.models.utils.graph_base INFO: Start compling the train graph which may take some time. Please wait for a moment ...
[08/24 01:44:30] libai INFO: Rank of current process: 1. World size: 2
[08/24 01:44:30] libai INFO: Command line arguments: Namespace(config_file='projects/RWKV_v4/configs/config_test.py', eval_only=False, fast_dev_run=False, opts=[], resume=False)
[08/24 01:44:30] libai INFO: Contents of args.config_file=projects/RWKV_v4/configs/config_test.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_config[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mtokenizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT2Tokenizer[39m
[38;5;242m# 配置 dataloader `build_image_train_loader` 和 `build_image_test_loader` 是 LiBai 提供的用于创建图像数据的训练集和测试集 DataLoader 的两个函数[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_nlp_test_loader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_nlp_train_loader[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15moneflow[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mflow[39m

[38;5;242m# 配置 model[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmodel[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT[39m[38;5;15m [39m[38;5;15m,[39m[38;5;15mGPTConfig[39m
[38;5;242m# 导入自定义的 dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mdataset[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mRWKVDataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mutils[39m[38;5;15m.[39m[38;5;15mconfig_optimizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_RWKV_v4_config_optim[39m


[38;5;15mtest[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15menable[39m[38;5;197m=[39m[38;5;81mFalse[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mweight_style[39m[38;5;197m=[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;186m"[39m[38;5;186mpytorch[39m[38;5;186m"[39m
[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mpath[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/RWKV-v4/for_load.pth[39m[38;5;186m"[39m

[38;5;15mgraph[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/models/graph.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mgraph[39m

[38;5;15mgraph[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;242m# optim = get_config("common/optim.py").optim[39m
[38;5;15moptim[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mAdam[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mparams[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mget_RWKV_v4_config_optim[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr[39m[38;5;197m=[39m[38;5;141m8e-4[39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;242m# 配置model[39m
[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mGPT[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mvocab_size[39m[38;5;197m=[39m[38;5;141m6064[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mmodel_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mRWKV[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_layer[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_embd[39m[38;5;197m=[39m[38;5;141m1024[39m
[38;5;15m)[39m

[38;5;242m# 训练过程[39m
[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/train.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mtrain[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minput_placement_device[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mcpu[39m[38;5;186m"[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mdist[39m[38;5;197m.[39m[38;5;15mpipeline_num_layers[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m6[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_micro_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mscheduler[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mlr_scheduler[39m[38;5;197m.[39m[38;5;15mStepLR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mstep_size[39m[38;5;197m=[39m[38;5;141m1000[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m        [39m[38;5;15mgamma[39m[38;5;197m=[39m[38;5;141m1.0[39m
[38;5;15m)[39m[38;5;15m [39m

[38;5;242m# false = fp32[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mdatafile[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/data/enwik8[39m[38;5;186m"[39m
[38;5;242m# 获得一个 DataLoader 的配置对象[39m
[38;5;15mdataloader[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mbuild_nlp_train_loader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mdataset[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m        [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mRWKVDataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_dir[39m[38;5;197m=[39m[38;5;15mdatafile[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mepoch_length_fixed[39m[38;5;197m=[39m[38;5;141m9996[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# train.train_iter=3[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_epoch[39m[38;5;197m=[39m[38;5;141m1[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186moutput/rwkv_output_loss_compare[39m[38;5;186m"[39m
[38;5;242m# train.load_weight = "/home/zhangxiaoyu/RWKV-LM/libai/projects/RWKV_v4/model/output_model/" # 采用同一个model进行初始化[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mrdma_enabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# model.cfg.hidden_dropout_prob= 0.0 # 关闭所有的dropout[39m
[38;5;242m# model.cfg.attention_probs_dropout_prob= 0.0[39m
[38;5;242m# model.cfg.bias_dropout_fusion= False[39m

[38;5;242m# train.dist.pipeline_parallel_size=2[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mevaluation[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# train.train_iter=5[39m
[38;5;242m# train.dist.tensor_parallel_size = 2  # 并行度为 4 的模型并行[39m
[38;5;242m# train.dist.tensor_parallel_size = 4  # 并行度为 4 的模型并行[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mactivation_checkpoint[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m [39m

[08/24 01:44:30] libai.engine.default INFO: Prepare training, validating, testing set
[08/24 01:44:32] libai.engine.default INFO: Auto-scaling the config to train.train_iter=10000, train.warmup_iter=0
[08/24 01:44:35] libai.engine.default INFO: Model:
GPT(
  (emb): VocabEmbedding(num_embeddings=6064, embedding_dim=1024)
  (blocks): Sequential(
    (0): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln0): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (1): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (2): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (3): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (4): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (5): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
  )
  (ln_out): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
  (head): Linear1D(in_features=1024, out_features=6064, bias=False, parallel=row)
  (head_q): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
  (head_k): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
)
[08/24 01:44:36] libai.engine.trainer INFO: Starting training from iteration 0
[08/24 01:44:36] libai.models.utils.graph_base INFO: Start compling the train graph which may take some time. Please wait for a moment ...
[08/24 02:29:32] libai INFO: Rank of current process: 1. World size: 2
[08/24 02:29:32] libai INFO: Command line arguments: Namespace(config_file='projects/RWKV_v4/configs/config_test.py', eval_only=False, fast_dev_run=False, opts=[], resume=False)
[08/24 02:29:32] libai INFO: Contents of args.config_file=projects/RWKV_v4/configs/config_test.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_config[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mtokenizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT2Tokenizer[39m
[38;5;242m# 配置 dataloader `build_image_train_loader` 和 `build_image_test_loader` 是 LiBai 提供的用于创建图像数据的训练集和测试集 DataLoader 的两个函数[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_nlp_test_loader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_nlp_train_loader[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15moneflow[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mflow[39m

[38;5;242m# 配置 model[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmodel[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT[39m[38;5;15m [39m[38;5;15m,[39m[38;5;15mGPTConfig[39m
[38;5;242m# 导入自定义的 dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mdataset[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mRWKVDataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mutils[39m[38;5;15m.[39m[38;5;15mconfig_optimizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_RWKV_v4_config_optim[39m


[38;5;15mtest[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15menable[39m[38;5;197m=[39m[38;5;81mFalse[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mweight_style[39m[38;5;197m=[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;186m"[39m[38;5;186mpytorch[39m[38;5;186m"[39m
[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mpath[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/RWKV-v4/for_load.pth[39m[38;5;186m"[39m

[38;5;15mgraph[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/models/graph.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mgraph[39m

[38;5;15mgraph[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m
[38;5;15mgraph[39m[38;5;197m.[39m[38;5;15mdebug[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m2[39m

[38;5;242m# optim = get_config("common/optim.py").optim[39m
[38;5;15moptim[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mAdam[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mparams[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mget_RWKV_v4_config_optim[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr[39m[38;5;197m=[39m[38;5;141m8e-4[39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;242m# 配置model[39m
[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mGPT[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mvocab_size[39m[38;5;197m=[39m[38;5;141m6064[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mmodel_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mRWKV[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_layer[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_embd[39m[38;5;197m=[39m[38;5;141m1024[39m
[38;5;15m)[39m

[38;5;242m# 训练过程[39m
[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/train.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mtrain[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minput_placement_device[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mcpu[39m[38;5;186m"[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mdist[39m[38;5;197m.[39m[38;5;15mpipeline_num_layers[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m6[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_micro_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mscheduler[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mlr_scheduler[39m[38;5;197m.[39m[38;5;15mStepLR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mstep_size[39m[38;5;197m=[39m[38;5;141m1000[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m        [39m[38;5;15mgamma[39m[38;5;197m=[39m[38;5;141m1.0[39m
[38;5;15m)[39m[38;5;15m [39m

[38;5;242m# false = fp32[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mdatafile[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/data/enwik8[39m[38;5;186m"[39m
[38;5;242m# 获得一个 DataLoader 的配置对象[39m
[38;5;15mdataloader[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mbuild_nlp_train_loader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mdataset[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m        [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mRWKVDataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_dir[39m[38;5;197m=[39m[38;5;15mdatafile[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mepoch_length_fixed[39m[38;5;197m=[39m[38;5;141m9996[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# train.train_iter=3[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_epoch[39m[38;5;197m=[39m[38;5;141m1[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186moutput/rwkv_output_loss_compare[39m[38;5;186m"[39m
[38;5;242m# train.load_weight = "/home/zhangxiaoyu/RWKV-LM/libai/projects/RWKV_v4/model/output_model/" # 采用同一个model进行初始化[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mrdma_enabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# model.cfg.hidden_dropout_prob= 0.0 # 关闭所有的dropout[39m
[38;5;242m# model.cfg.attention_probs_dropout_prob= 0.0[39m
[38;5;242m# model.cfg.bias_dropout_fusion= False[39m

[38;5;242m# train.dist.pipeline_parallel_size=2[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mevaluation[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# train.train_iter=5[39m
[38;5;242m# train.dist.tensor_parallel_size = 2  # 并行度为 4 的模型并行[39m
[38;5;242m# train.dist.tensor_parallel_size = 4  # 并行度为 4 的模型并行[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mactivation_checkpoint[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m [39m

[08/24 02:29:32] libai.engine.default INFO: Prepare training, validating, testing set
[08/24 02:29:34] libai.engine.default INFO: Auto-scaling the config to train.train_iter=10000, train.warmup_iter=0
[08/24 02:29:39] libai.engine.default INFO: Model:
GPT(
  (emb): VocabEmbedding(num_embeddings=6064, embedding_dim=1024)
  (blocks): Sequential(
    (0): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln0): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (1): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (2): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (3): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (4): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (5): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
  )
  (ln_out): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
  (head): Linear1D(in_features=1024, out_features=6064, bias=False, parallel=row)
  (head_q): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
  (head_k): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
)
[08/24 02:29:39] libai.engine.default INFO: Graph debug mode on, automatically output debug info.
[08/24 02:29:39] libai.engine.default INFO: Graph debug mode on, automatically output debug info.
[08/24 02:29:39] libai.engine.trainer INFO: Starting training from iteration 0
[08/24 02:29:40] libai.models.utils.graph_base INFO: Start compling the train graph which may take some time. Please wait for a moment ...
[08/24 02:33:32] libai INFO: Rank of current process: 1. World size: 2
[08/24 02:33:32] libai INFO: Command line arguments: Namespace(config_file='projects/RWKV_v4/configs/config_test.py', eval_only=False, fast_dev_run=False, opts=[], resume=False)
[08/24 02:33:32] libai INFO: Contents of args.config_file=projects/RWKV_v4/configs/config_test.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_config[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mtokenizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT2Tokenizer[39m
[38;5;242m# 配置 dataloader `build_image_train_loader` 和 `build_image_test_loader` 是 LiBai 提供的用于创建图像数据的训练集和测试集 DataLoader 的两个函数[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_nlp_test_loader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_nlp_train_loader[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15moneflow[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mflow[39m

[38;5;242m# 配置 model[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmodel[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT[39m[38;5;15m [39m[38;5;15m,[39m[38;5;15mGPTConfig[39m
[38;5;242m# 导入自定义的 dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mdataset[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mRWKVDataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mutils[39m[38;5;15m.[39m[38;5;15mconfig_optimizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_RWKV_v4_config_optim[39m


[38;5;15mtest[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15menable[39m[38;5;197m=[39m[38;5;81mFalse[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mweight_style[39m[38;5;197m=[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;186m"[39m[38;5;186mpytorch[39m[38;5;186m"[39m
[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mpath[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/RWKV-v4/for_load.pth[39m[38;5;186m"[39m

[38;5;15mgraph[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/models/graph.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mgraph[39m

[38;5;15mgraph[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m
[38;5;15mgraph[39m[38;5;197m.[39m[38;5;15mdebug[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m2[39m

[38;5;242m# optim = get_config("common/optim.py").optim[39m
[38;5;15moptim[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mAdam[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mparams[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mget_RWKV_v4_config_optim[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr[39m[38;5;197m=[39m[38;5;141m8e-4[39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;242m# 配置model[39m
[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mGPT[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mvocab_size[39m[38;5;197m=[39m[38;5;141m6064[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mmodel_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mRWKV[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_layer[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_embd[39m[38;5;197m=[39m[38;5;141m1024[39m
[38;5;15m)[39m

[38;5;242m# 训练过程[39m
[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/train.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mtrain[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minput_placement_device[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mcpu[39m[38;5;186m"[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mdist[39m[38;5;197m.[39m[38;5;15mpipeline_num_layers[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m6[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_micro_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mscheduler[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mlr_scheduler[39m[38;5;197m.[39m[38;5;15mStepLR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mstep_size[39m[38;5;197m=[39m[38;5;141m1000[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m        [39m[38;5;15mgamma[39m[38;5;197m=[39m[38;5;141m1.0[39m
[38;5;15m)[39m[38;5;15m [39m

[38;5;242m# false = fp32[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mdatafile[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/data/enwik8[39m[38;5;186m"[39m
[38;5;242m# 获得一个 DataLoader 的配置对象[39m
[38;5;15mdataloader[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mbuild_nlp_train_loader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mdataset[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m        [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mRWKVDataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_dir[39m[38;5;197m=[39m[38;5;15mdatafile[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mepoch_length_fixed[39m[38;5;197m=[39m[38;5;141m9996[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# train.train_iter=3[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_epoch[39m[38;5;197m=[39m[38;5;141m1[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186moutput/rwkv_output_loss_compare[39m[38;5;186m"[39m
[38;5;242m# train.load_weight = "/home/zhangxiaoyu/RWKV-LM/libai/projects/RWKV_v4/model/output_model/" # 采用同一个model进行初始化[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mrdma_enabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# model.cfg.hidden_dropout_prob= 0.0 # 关闭所有的dropout[39m
[38;5;242m# model.cfg.attention_probs_dropout_prob= 0.0[39m
[38;5;242m# model.cfg.bias_dropout_fusion= False[39m

[38;5;242m# train.dist.pipeline_parallel_size=2[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mevaluation[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# train.train_iter=5[39m
[38;5;242m# train.dist.tensor_parallel_size = 2  # 并行度为 4 的模型并行[39m
[38;5;242m# train.dist.tensor_parallel_size = 4  # 并行度为 4 的模型并行[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mactivation_checkpoint[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m [39m

[08/24 02:33:32] libai.engine.default INFO: Prepare training, validating, testing set
[08/24 02:33:34] libai.engine.default INFO: Auto-scaling the config to train.train_iter=10000, train.warmup_iter=0
[08/24 02:33:38] libai.engine.default INFO: Model:
GPT(
  (emb): VocabEmbedding(num_embeddings=6064, embedding_dim=1024)
  (blocks): Sequential(
    (0): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln0): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (1): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (2): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (3): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (4): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (5): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
  )
  (ln_out): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
  (head): Linear1D(in_features=1024, out_features=6064, bias=False, parallel=row)
  (head_q): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
  (head_k): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
)
[08/24 02:33:38] libai.engine.default INFO: Graph debug mode on, automatically output debug info.
[08/24 02:33:38] libai.engine.default INFO: Graph debug mode on, automatically output debug info.
[08/24 02:33:38] libai.engine.trainer INFO: Starting training from iteration 0
[08/24 02:33:39] libai.models.utils.graph_base INFO: Start compling the train graph which may take some time. Please wait for a moment ...
[08/24 02:43:17] libai INFO: Rank of current process: 1. World size: 2
[08/24 02:43:17] libai INFO: Command line arguments: Namespace(config_file='projects/RWKV_v4/configs/config_test.py', eval_only=False, fast_dev_run=False, opts=[], resume=False)
[08/24 02:43:17] libai INFO: Contents of args.config_file=projects/RWKV_v4/configs/config_test.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_config[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mtokenizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT2Tokenizer[39m
[38;5;242m# 配置 dataloader `build_image_train_loader` 和 `build_image_test_loader` 是 LiBai 提供的用于创建图像数据的训练集和测试集 DataLoader 的两个函数[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_nlp_test_loader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_nlp_train_loader[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15moneflow[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mflow[39m

[38;5;242m# 配置 model[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmodel[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT[39m[38;5;15m [39m[38;5;15m,[39m[38;5;15mGPTConfig[39m
[38;5;242m# 导入自定义的 dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mdataset[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mRWKVDataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mutils[39m[38;5;15m.[39m[38;5;15mconfig_optimizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_RWKV_v4_config_optim[39m


[38;5;15mtest[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15menable[39m[38;5;197m=[39m[38;5;81mFalse[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mweight_style[39m[38;5;197m=[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;186m"[39m[38;5;186mpytorch[39m[38;5;186m"[39m
[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mpath[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/RWKV-v4/for_load.pth[39m[38;5;186m"[39m

[38;5;15mgraph[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/models/graph.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mgraph[39m

[38;5;15mgraph[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m
[38;5;15mgraph[39m[38;5;197m.[39m[38;5;15mdebug[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m2[39m

[38;5;242m# optim = get_config("common/optim.py").optim[39m
[38;5;15moptim[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mAdam[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mparams[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mget_RWKV_v4_config_optim[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr[39m[38;5;197m=[39m[38;5;141m8e-4[39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;242m# 配置model[39m
[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mGPT[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mvocab_size[39m[38;5;197m=[39m[38;5;141m6064[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mmodel_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mRWKV[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_layer[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_embd[39m[38;5;197m=[39m[38;5;141m1024[39m
[38;5;15m)[39m

[38;5;242m# 训练过程[39m
[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/train.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mtrain[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minput_placement_device[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mcpu[39m[38;5;186m"[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mdist[39m[38;5;197m.[39m[38;5;15mpipeline_num_layers[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m6[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_micro_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mscheduler[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mlr_scheduler[39m[38;5;197m.[39m[38;5;15mStepLR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mstep_size[39m[38;5;197m=[39m[38;5;141m1000[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m        [39m[38;5;15mgamma[39m[38;5;197m=[39m[38;5;141m1.0[39m
[38;5;15m)[39m[38;5;15m [39m

[38;5;242m# false = fp32[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mdatafile[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/data/enwik8[39m[38;5;186m"[39m
[38;5;242m# 获得一个 DataLoader 的配置对象[39m
[38;5;15mdataloader[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mbuild_nlp_train_loader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mdataset[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m        [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mRWKVDataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_dir[39m[38;5;197m=[39m[38;5;15mdatafile[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mepoch_length_fixed[39m[38;5;197m=[39m[38;5;141m9996[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# train.train_iter=3[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_epoch[39m[38;5;197m=[39m[38;5;141m1[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186moutput/rwkv_output_loss_compare[39m[38;5;186m"[39m
[38;5;242m# train.load_weight = "/home/zhangxiaoyu/RWKV-LM/libai/projects/RWKV_v4/model/output_model/" # 采用同一个model进行初始化[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mrdma_enabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# model.cfg.hidden_dropout_prob= 0.0 # 关闭所有的dropout[39m
[38;5;242m# model.cfg.attention_probs_dropout_prob= 0.0[39m
[38;5;242m# model.cfg.bias_dropout_fusion= False[39m

[38;5;242m# train.dist.pipeline_parallel_size=2[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mevaluation[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# train.train_iter=5[39m
[38;5;242m# train.dist.tensor_parallel_size = 2  # 并行度为 4 的模型并行[39m
[38;5;242m# train.dist.tensor_parallel_size = 4  # 并行度为 4 的模型并行[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mactivation_checkpoint[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m [39m

[08/24 02:43:17] libai.engine.default INFO: Prepare training, validating, testing set
[08/24 02:43:19] libai.engine.default INFO: Auto-scaling the config to train.train_iter=10000, train.warmup_iter=0
[08/24 02:43:22] libai.engine.default INFO: Model:
GPT(
  (emb): VocabEmbedding(num_embeddings=6064, embedding_dim=1024)
  (blocks): Sequential(
    (0): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln0): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (1): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (2): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (3): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (4): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (5): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
  )
  (ln_out): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
  (head): Linear1D(in_features=1024, out_features=6064, bias=False, parallel=row)
  (head_q): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
  (head_k): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
)
[08/24 02:43:22] libai.engine.default INFO: Graph debug mode on, automatically output debug info.
[08/24 02:43:22] libai.engine.default INFO: Graph debug mode on, automatically output debug info.
[08/24 02:43:22] libai.engine.trainer INFO: Starting training from iteration 0
[08/24 02:43:23] libai.models.utils.graph_base INFO: Start compling the train graph which may take some time. Please wait for a moment ...
[08/24 02:57:29] libai INFO: Rank of current process: 1. World size: 2
[08/24 02:57:29] libai INFO: Command line arguments: Namespace(config_file='projects/RWKV_v4/configs/config_test.py', eval_only=False, fast_dev_run=False, opts=[], resume=False)
[08/24 02:57:29] libai INFO: Contents of args.config_file=projects/RWKV_v4/configs/config_test.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_config[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mtokenizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT2Tokenizer[39m
[38;5;242m# 配置 dataloader `build_image_train_loader` 和 `build_image_test_loader` 是 LiBai 提供的用于创建图像数据的训练集和测试集 DataLoader 的两个函数[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_nlp_test_loader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_nlp_train_loader[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15moneflow[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mflow[39m

[38;5;242m# 配置 model[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmodel[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT[39m[38;5;15m [39m[38;5;15m,[39m[38;5;15mGPTConfig[39m
[38;5;242m# 导入自定义的 dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mdataset[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mRWKVDataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mutils[39m[38;5;15m.[39m[38;5;15mconfig_optimizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_RWKV_v4_config_optim[39m


[38;5;15mtest[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15menable[39m[38;5;197m=[39m[38;5;81mFalse[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mweight_style[39m[38;5;197m=[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;186m"[39m[38;5;186mpytorch[39m[38;5;186m"[39m
[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mpath[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/RWKV-v4/for_load.pth[39m[38;5;186m"[39m

[38;5;15mgraph[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/models/graph.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mgraph[39m

[38;5;15mgraph[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m
[38;5;15mgraph[39m[38;5;197m.[39m[38;5;15mdebug[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m2[39m

[38;5;242m# optim = get_config("common/optim.py").optim[39m
[38;5;15moptim[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mAdam[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mparams[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mget_RWKV_v4_config_optim[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr[39m[38;5;197m=[39m[38;5;141m8e-4[39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;242m# 配置model[39m
[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mGPT[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mvocab_size[39m[38;5;197m=[39m[38;5;141m6064[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mmodel_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mRWKV[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_layer[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_embd[39m[38;5;197m=[39m[38;5;141m1024[39m
[38;5;15m)[39m

[38;5;242m# 训练过程[39m
[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/train.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mtrain[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minput_placement_device[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mcpu[39m[38;5;186m"[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mdist[39m[38;5;197m.[39m[38;5;15mpipeline_num_layers[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m6[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_micro_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mscheduler[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mlr_scheduler[39m[38;5;197m.[39m[38;5;15mStepLR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mstep_size[39m[38;5;197m=[39m[38;5;141m1000[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m        [39m[38;5;15mgamma[39m[38;5;197m=[39m[38;5;141m1.0[39m
[38;5;15m)[39m[38;5;15m [39m

[38;5;242m# false = fp32[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mdatafile[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/data/enwik8[39m[38;5;186m"[39m
[38;5;242m# 获得一个 DataLoader 的配置对象[39m
[38;5;15mdataloader[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mbuild_nlp_train_loader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mdataset[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m        [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mRWKVDataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_dir[39m[38;5;197m=[39m[38;5;15mdatafile[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mepoch_length_fixed[39m[38;5;197m=[39m[38;5;141m9996[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# train.train_iter=3[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_epoch[39m[38;5;197m=[39m[38;5;141m1[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186moutput/rwkv_output_loss_compare[39m[38;5;186m"[39m
[38;5;242m# train.load_weight = "/home/zhangxiaoyu/RWKV-LM/libai/projects/RWKV_v4/model/output_model/" # 采用同一个model进行初始化[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mrdma_enabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# model.cfg.hidden_dropout_prob= 0.0 # 关闭所有的dropout[39m
[38;5;242m# model.cfg.attention_probs_dropout_prob= 0.0[39m
[38;5;242m# model.cfg.bias_dropout_fusion= False[39m

[38;5;242m# train.dist.pipeline_parallel_size=2[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mevaluation[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# train.train_iter=5[39m
[38;5;242m# train.dist.tensor_parallel_size = 2  # 并行度为 4 的模型并行[39m
[38;5;242m# train.dist.tensor_parallel_size = 4  # 并行度为 4 的模型并行[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mactivation_checkpoint[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m [39m

[08/24 02:57:29] libai.engine.default INFO: Prepare training, validating, testing set
[08/24 02:57:31] libai.engine.default INFO: Auto-scaling the config to train.train_iter=10000, train.warmup_iter=0
[08/24 02:57:34] libai.engine.default INFO: Model:
GPT(
  (emb): VocabEmbedding(num_embeddings=6064, embedding_dim=1024)
  (blocks): Sequential(
    (0): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln0): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (1): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (2): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (3): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (4): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (5): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
  )
  (ln_out): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
  (head): Linear1D(in_features=1024, out_features=6064, bias=False, parallel=row)
  (head_q): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
  (head_k): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
)
[08/24 02:57:34] libai.engine.default INFO: Graph debug mode on, automatically output debug info.
[08/24 02:57:34] libai.engine.default INFO: Graph debug mode on, automatically output debug info.
[08/24 02:57:35] libai.engine.trainer INFO: Starting training from iteration 0
[08/24 02:57:35] libai.models.utils.graph_base INFO: Start compling the train graph which may take some time. Please wait for a moment ...
[08/24 03:15:58] libai INFO: Rank of current process: 1. World size: 2
[08/24 03:15:58] libai INFO: Command line arguments: Namespace(config_file='projects/RWKV_v4/configs/config_test.py', eval_only=False, fast_dev_run=False, opts=[], resume=False)
[08/24 03:15:58] libai INFO: Contents of args.config_file=projects/RWKV_v4/configs/config_test.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_config[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mtokenizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT2Tokenizer[39m
[38;5;242m# 配置 dataloader `build_image_train_loader` 和 `build_image_test_loader` 是 LiBai 提供的用于创建图像数据的训练集和测试集 DataLoader 的两个函数[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_nlp_test_loader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_nlp_train_loader[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15moneflow[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mflow[39m

[38;5;242m# 配置 model[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmodel[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT[39m[38;5;15m [39m[38;5;15m,[39m[38;5;15mGPTConfig[39m
[38;5;242m# 导入自定义的 dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mdataset[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mRWKVDataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mutils[39m[38;5;15m.[39m[38;5;15mconfig_optimizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_RWKV_v4_config_optim[39m


[38;5;15mtest[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15menable[39m[38;5;197m=[39m[38;5;81mFalse[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mweight_style[39m[38;5;197m=[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;186m"[39m[38;5;186mpytorch[39m[38;5;186m"[39m
[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mpath[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/RWKV-v4/for_load.pth[39m[38;5;186m"[39m

[38;5;15mgraph[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/models/graph.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mgraph[39m

[38;5;15mgraph[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m
[38;5;15mgraph[39m[38;5;197m.[39m[38;5;15mdebug[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m2[39m

[38;5;242m# optim = get_config("common/optim.py").optim[39m
[38;5;15moptim[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mAdam[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mparams[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mget_RWKV_v4_config_optim[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr[39m[38;5;197m=[39m[38;5;141m8e-4[39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;242m# 配置model[39m
[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mGPT[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mvocab_size[39m[38;5;197m=[39m[38;5;141m6064[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mmodel_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mRWKV[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_layer[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_embd[39m[38;5;197m=[39m[38;5;141m1024[39m
[38;5;15m)[39m

[38;5;242m# 训练过程[39m
[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/train.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mtrain[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minput_placement_device[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mcpu[39m[38;5;186m"[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mdist[39m[38;5;197m.[39m[38;5;15mpipeline_num_layers[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m6[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_micro_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mscheduler[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mlr_scheduler[39m[38;5;197m.[39m[38;5;15mStepLR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mstep_size[39m[38;5;197m=[39m[38;5;141m1000[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m        [39m[38;5;15mgamma[39m[38;5;197m=[39m[38;5;141m1.0[39m
[38;5;15m)[39m[38;5;15m [39m

[38;5;242m# false = fp32[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mdatafile[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/data/enwik8[39m[38;5;186m"[39m
[38;5;242m# 获得一个 DataLoader 的配置对象[39m
[38;5;15mdataloader[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mbuild_nlp_train_loader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mdataset[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m        [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mRWKVDataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_dir[39m[38;5;197m=[39m[38;5;15mdatafile[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mepoch_length_fixed[39m[38;5;197m=[39m[38;5;141m9996[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# train.train_iter=3[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_epoch[39m[38;5;197m=[39m[38;5;141m1[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186moutput/rwkv_output_loss_compare[39m[38;5;186m"[39m
[38;5;242m# train.load_weight = "/home/zhangxiaoyu/RWKV-LM/libai/projects/RWKV_v4/model/output_model/" # 采用同一个model进行初始化[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mrdma_enabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# model.cfg.hidden_dropout_prob= 0.0 # 关闭所有的dropout[39m
[38;5;242m# model.cfg.attention_probs_dropout_prob= 0.0[39m
[38;5;242m# model.cfg.bias_dropout_fusion= False[39m

[38;5;242m# train.dist.pipeline_parallel_size=2[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mevaluation[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# train.train_iter=5[39m
[38;5;242m# train.dist.tensor_parallel_size = 2  # 并行度为 4 的模型并行[39m
[38;5;242m# train.dist.tensor_parallel_size = 4  # 并行度为 4 的模型并行[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mactivation_checkpoint[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m [39m

[08/24 03:15:58] libai.engine.default INFO: Prepare training, validating, testing set
[08/24 03:16:00] libai.engine.default INFO: Auto-scaling the config to train.train_iter=10000, train.warmup_iter=0
[08/24 03:16:04] libai.engine.default INFO: Model:
GPT(
  (emb): VocabEmbedding(num_embeddings=6064, embedding_dim=1024)
  (blocks): Sequential(
    (0): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln0): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (1): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (2): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (3): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (4): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (5): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
  )
  (ln_out): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
  (head): Linear1D(in_features=1024, out_features=6064, bias=False, parallel=row)
  (head_q): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
  (head_k): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
)
[08/24 03:16:04] libai.engine.default INFO: Graph debug mode on, automatically output debug info.
[08/24 03:16:04] libai.engine.default INFO: Graph debug mode on, automatically output debug info.
[08/24 03:16:05] libai.engine.trainer INFO: Starting training from iteration 0
[08/24 03:16:05] libai.models.utils.graph_base INFO: Start compling the train graph which may take some time. Please wait for a moment ...
[08/24 03:31:43] libai INFO: Rank of current process: 1. World size: 2
[08/24 03:31:43] libai INFO: Command line arguments: Namespace(config_file='projects/RWKV_v4/configs/config_test.py', eval_only=False, fast_dev_run=False, opts=[], resume=False)
[08/24 03:31:43] libai INFO: Contents of args.config_file=projects/RWKV_v4/configs/config_test.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_config[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mtokenizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT2Tokenizer[39m
[38;5;242m# 配置 dataloader `build_image_train_loader` 和 `build_image_test_loader` 是 LiBai 提供的用于创建图像数据的训练集和测试集 DataLoader 的两个函数[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_nlp_test_loader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_nlp_train_loader[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15moneflow[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mflow[39m

[38;5;242m# 配置 model[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmodel[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT[39m[38;5;15m [39m[38;5;15m,[39m[38;5;15mGPTConfig[39m
[38;5;242m# 导入自定义的 dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mdataset[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mRWKVDataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mutils[39m[38;5;15m.[39m[38;5;15mconfig_optimizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_RWKV_v4_config_optim[39m


[38;5;15mtest[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15menable[39m[38;5;197m=[39m[38;5;81mFalse[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mweight_style[39m[38;5;197m=[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;186m"[39m[38;5;186mpytorch[39m[38;5;186m"[39m
[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mpath[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/RWKV-v4/for_load.pth[39m[38;5;186m"[39m

[38;5;15mgraph[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/models/graph.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mgraph[39m

[38;5;15mgraph[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m
[38;5;15mgraph[39m[38;5;197m.[39m[38;5;15mdebug[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m2[39m

[38;5;242m# optim = get_config("common/optim.py").optim[39m
[38;5;15moptim[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mAdam[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mparams[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mget_RWKV_v4_config_optim[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr[39m[38;5;197m=[39m[38;5;141m8e-4[39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;242m# 配置model[39m
[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mGPT[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mvocab_size[39m[38;5;197m=[39m[38;5;141m6064[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mmodel_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mRWKV[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_layer[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_embd[39m[38;5;197m=[39m[38;5;141m1024[39m
[38;5;15m)[39m

[38;5;242m# 训练过程[39m
[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/train.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mtrain[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minput_placement_device[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mcpu[39m[38;5;186m"[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mdist[39m[38;5;197m.[39m[38;5;15mpipeline_num_layers[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m6[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_micro_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mscheduler[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mlr_scheduler[39m[38;5;197m.[39m[38;5;15mStepLR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mstep_size[39m[38;5;197m=[39m[38;5;141m1000[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m        [39m[38;5;15mgamma[39m[38;5;197m=[39m[38;5;141m1.0[39m
[38;5;15m)[39m[38;5;15m [39m

[38;5;242m# false = fp32[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mdatafile[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/data/enwik8[39m[38;5;186m"[39m
[38;5;242m# 获得一个 DataLoader 的配置对象[39m
[38;5;15mdataloader[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mbuild_nlp_train_loader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mdataset[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m        [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mRWKVDataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_dir[39m[38;5;197m=[39m[38;5;15mdatafile[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mepoch_length_fixed[39m[38;5;197m=[39m[38;5;141m9996[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# train.train_iter=3[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_epoch[39m[38;5;197m=[39m[38;5;141m1[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186moutput/rwkv_output_loss_compare[39m[38;5;186m"[39m
[38;5;242m# train.load_weight = "/home/zhangxiaoyu/RWKV-LM/libai/projects/RWKV_v4/model/output_model/" # 采用同一个model进行初始化[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mrdma_enabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# model.cfg.hidden_dropout_prob= 0.0 # 关闭所有的dropout[39m
[38;5;242m# model.cfg.attention_probs_dropout_prob= 0.0[39m
[38;5;242m# model.cfg.bias_dropout_fusion= False[39m

[38;5;242m# train.dist.pipeline_parallel_size=2[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mevaluation[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# train.train_iter=5[39m
[38;5;242m# train.dist.tensor_parallel_size = 2  # 并行度为 4 的模型并行[39m
[38;5;242m# train.dist.tensor_parallel_size = 4  # 并行度为 4 的模型并行[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mactivation_checkpoint[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m [39m

[08/24 03:31:43] libai.engine.default INFO: Prepare training, validating, testing set
[08/24 03:31:45] libai.engine.default INFO: Auto-scaling the config to train.train_iter=10000, train.warmup_iter=0
[08/24 03:31:49] libai.engine.default INFO: Model:
GPT(
  (emb): VocabEmbedding(num_embeddings=6064, embedding_dim=1024)
  (blocks): Sequential(
    (0): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln0): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (1): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (2): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (3): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (4): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (5): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
  )
  (ln_out): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
  (head): Linear1D(in_features=1024, out_features=6064, bias=False, parallel=row)
  (head_q): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
  (head_k): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
)
[08/24 03:31:49] libai.engine.default INFO: Graph debug mode on, automatically output debug info.
[08/24 03:31:49] libai.engine.default INFO: Graph debug mode on, automatically output debug info.
[08/24 03:31:49] libai.engine.trainer INFO: Starting training from iteration 0
[08/24 03:31:50] libai.models.utils.graph_base INFO: Start compling the train graph which may take some time. Please wait for a moment ...
[08/24 03:31:50] libai.engine.hooks INFO: Total training time: 0:00:00 (0:00:00 on hooks)
[08/24 03:32:06] libai INFO: Rank of current process: 1. World size: 2
[08/24 03:32:06] libai INFO: Command line arguments: Namespace(config_file='projects/RWKV_v4/configs/config_test.py', eval_only=False, fast_dev_run=False, opts=[], resume=False)
[08/24 03:32:06] libai INFO: Contents of args.config_file=projects/RWKV_v4/configs/config_test.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_config[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mtokenizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT2Tokenizer[39m
[38;5;242m# 配置 dataloader `build_image_train_loader` 和 `build_image_test_loader` 是 LiBai 提供的用于创建图像数据的训练集和测试集 DataLoader 的两个函数[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_nlp_test_loader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_nlp_train_loader[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15moneflow[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mflow[39m

[38;5;242m# 配置 model[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmodel[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT[39m[38;5;15m [39m[38;5;15m,[39m[38;5;15mGPTConfig[39m
[38;5;242m# 导入自定义的 dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mdataset[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mRWKVDataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mutils[39m[38;5;15m.[39m[38;5;15mconfig_optimizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_RWKV_v4_config_optim[39m


[38;5;15mtest[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15menable[39m[38;5;197m=[39m[38;5;81mFalse[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mweight_style[39m[38;5;197m=[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;186m"[39m[38;5;186mpytorch[39m[38;5;186m"[39m
[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mpath[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/RWKV-v4/for_load.pth[39m[38;5;186m"[39m

[38;5;15mgraph[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/models/graph.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mgraph[39m

[38;5;15mgraph[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m
[38;5;15mgraph[39m[38;5;197m.[39m[38;5;15mdebug[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m2[39m

[38;5;242m# optim = get_config("common/optim.py").optim[39m
[38;5;15moptim[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mAdam[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mparams[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mget_RWKV_v4_config_optim[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr[39m[38;5;197m=[39m[38;5;141m8e-4[39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;242m# 配置model[39m
[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mGPT[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mvocab_size[39m[38;5;197m=[39m[38;5;141m6064[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mmodel_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mRWKV[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_layer[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_embd[39m[38;5;197m=[39m[38;5;141m1024[39m
[38;5;15m)[39m

[38;5;242m# 训练过程[39m
[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/train.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mtrain[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minput_placement_device[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mcpu[39m[38;5;186m"[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mdist[39m[38;5;197m.[39m[38;5;15mpipeline_num_layers[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m6[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_micro_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mscheduler[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mlr_scheduler[39m[38;5;197m.[39m[38;5;15mStepLR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mstep_size[39m[38;5;197m=[39m[38;5;141m1000[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m        [39m[38;5;15mgamma[39m[38;5;197m=[39m[38;5;141m1.0[39m
[38;5;15m)[39m[38;5;15m [39m

[38;5;242m# false = fp32[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mdatafile[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/data/enwik8[39m[38;5;186m"[39m
[38;5;242m# 获得一个 DataLoader 的配置对象[39m
[38;5;15mdataloader[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mbuild_nlp_train_loader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mdataset[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m        [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mRWKVDataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_dir[39m[38;5;197m=[39m[38;5;15mdatafile[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mepoch_length_fixed[39m[38;5;197m=[39m[38;5;141m9996[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# train.train_iter=3[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_epoch[39m[38;5;197m=[39m[38;5;141m1[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186moutput/rwkv_output_loss_compare[39m[38;5;186m"[39m
[38;5;242m# train.load_weight = "/home/zhangxiaoyu/RWKV-LM/libai/projects/RWKV_v4/model/output_model/" # 采用同一个model进行初始化[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mrdma_enabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# model.cfg.hidden_dropout_prob= 0.0 # 关闭所有的dropout[39m
[38;5;242m# model.cfg.attention_probs_dropout_prob= 0.0[39m
[38;5;242m# model.cfg.bias_dropout_fusion= False[39m

[38;5;242m# train.dist.pipeline_parallel_size=2[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mevaluation[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# train.train_iter=5[39m
[38;5;242m# train.dist.tensor_parallel_size = 2  # 并行度为 4 的模型并行[39m
[38;5;242m# train.dist.tensor_parallel_size = 4  # 并行度为 4 的模型并行[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mactivation_checkpoint[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m [39m

[08/24 03:32:06] libai.engine.default INFO: Prepare training, validating, testing set
[08/24 03:32:08] libai.engine.default INFO: Auto-scaling the config to train.train_iter=10000, train.warmup_iter=0
[08/24 03:32:12] libai.engine.default INFO: Model:
GPT(
  (emb): VocabEmbedding(num_embeddings=6064, embedding_dim=1024)
  (blocks): Sequential(
    (0): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln0): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (1): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (2): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (3): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (4): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (5): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
  )
  (ln_out): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
  (head): Linear1D(in_features=1024, out_features=6064, bias=False, parallel=row)
  (head_q): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
  (head_k): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
)
[08/24 03:32:12] libai.engine.default INFO: Graph debug mode on, automatically output debug info.
[08/24 03:32:12] libai.engine.default INFO: Graph debug mode on, automatically output debug info.
[08/24 03:32:12] libai.engine.trainer INFO: Starting training from iteration 0
[08/24 03:32:12] libai.models.utils.graph_base INFO: Start compling the train graph which may take some time. Please wait for a moment ...
[08/24 03:32:13] libai.engine.hooks INFO: Total training time: 0:00:00 (0:00:00 on hooks)
[08/24 03:34:05] libai INFO: Rank of current process: 1. World size: 2
[08/24 03:34:05] libai INFO: Command line arguments: Namespace(config_file='projects/RWKV_v4/configs/config_test.py', eval_only=False, fast_dev_run=False, opts=[], resume=False)
[08/24 03:34:05] libai INFO: Contents of args.config_file=projects/RWKV_v4/configs/config_test.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_config[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mtokenizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT2Tokenizer[39m
[38;5;242m# 配置 dataloader `build_image_train_loader` 和 `build_image_test_loader` 是 LiBai 提供的用于创建图像数据的训练集和测试集 DataLoader 的两个函数[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_nlp_test_loader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_nlp_train_loader[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15moneflow[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mflow[39m

[38;5;242m# 配置 model[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmodel[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT[39m[38;5;15m [39m[38;5;15m,[39m[38;5;15mGPTConfig[39m
[38;5;242m# 导入自定义的 dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mdataset[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mRWKVDataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mutils[39m[38;5;15m.[39m[38;5;15mconfig_optimizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_RWKV_v4_config_optim[39m


[38;5;15mtest[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15menable[39m[38;5;197m=[39m[38;5;81mFalse[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mweight_style[39m[38;5;197m=[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;186m"[39m[38;5;186mpytorch[39m[38;5;186m"[39m
[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mpath[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/RWKV-v4/for_load.pth[39m[38;5;186m"[39m

[38;5;15mgraph[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/models/graph.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mgraph[39m

[38;5;15mgraph[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m
[38;5;15mgraph[39m[38;5;197m.[39m[38;5;15mdebug[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m2[39m

[38;5;242m# optim = get_config("common/optim.py").optim[39m
[38;5;15moptim[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mAdam[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mparams[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mget_RWKV_v4_config_optim[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr[39m[38;5;197m=[39m[38;5;141m8e-4[39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;242m# 配置model[39m
[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mGPT[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mvocab_size[39m[38;5;197m=[39m[38;5;141m6064[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mmodel_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mRWKV[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_layer[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_embd[39m[38;5;197m=[39m[38;5;141m1024[39m
[38;5;15m)[39m

[38;5;242m# 训练过程[39m
[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/train.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mtrain[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minput_placement_device[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mcpu[39m[38;5;186m"[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mdist[39m[38;5;197m.[39m[38;5;15mpipeline_num_layers[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m6[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_micro_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mscheduler[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mlr_scheduler[39m[38;5;197m.[39m[38;5;15mStepLR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mstep_size[39m[38;5;197m=[39m[38;5;141m1000[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m        [39m[38;5;15mgamma[39m[38;5;197m=[39m[38;5;141m1.0[39m
[38;5;15m)[39m[38;5;15m [39m

[38;5;242m# false = fp32[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mdatafile[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/data/enwik8[39m[38;5;186m"[39m
[38;5;242m# 获得一个 DataLoader 的配置对象[39m
[38;5;15mdataloader[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mbuild_nlp_train_loader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mdataset[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m        [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mRWKVDataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_dir[39m[38;5;197m=[39m[38;5;15mdatafile[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mepoch_length_fixed[39m[38;5;197m=[39m[38;5;141m9996[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# train.train_iter=3[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_epoch[39m[38;5;197m=[39m[38;5;141m1[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186moutput/rwkv_output_loss_compare[39m[38;5;186m"[39m
[38;5;242m# train.load_weight = "/home/zhangxiaoyu/RWKV-LM/libai/projects/RWKV_v4/model/output_model/" # 采用同一个model进行初始化[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mrdma_enabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# model.cfg.hidden_dropout_prob= 0.0 # 关闭所有的dropout[39m
[38;5;242m# model.cfg.attention_probs_dropout_prob= 0.0[39m
[38;5;242m# model.cfg.bias_dropout_fusion= False[39m

[38;5;242m# train.dist.pipeline_parallel_size=2[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mevaluation[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# train.train_iter=5[39m
[38;5;242m# train.dist.tensor_parallel_size = 2  # 并行度为 4 的模型并行[39m
[38;5;242m# train.dist.tensor_parallel_size = 4  # 并行度为 4 的模型并行[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mactivation_checkpoint[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m [39m

[08/24 03:34:05] libai.engine.default INFO: Prepare training, validating, testing set
[08/24 03:34:06] libai.engine.default INFO: Auto-scaling the config to train.train_iter=10000, train.warmup_iter=0
[08/24 03:34:10] libai.engine.default INFO: Model:
GPT(
  (emb): VocabEmbedding(num_embeddings=6064, embedding_dim=1024)
  (blocks): Sequential(
    (0): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln0): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (1): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (2): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (3): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (4): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (5): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
  )
  (ln_out): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
  (head): Linear1D(in_features=1024, out_features=6064, bias=False, parallel=row)
  (head_q): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
  (head_k): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
)
[08/24 03:34:10] libai.engine.default INFO: Graph debug mode on, automatically output debug info.
[08/24 03:34:10] libai.engine.default INFO: Graph debug mode on, automatically output debug info.
[08/24 03:34:10] libai.engine.trainer INFO: Starting training from iteration 0
[08/24 03:34:11] libai.models.utils.graph_base INFO: Start compling the train graph which may take some time. Please wait for a moment ...
[08/24 03:36:26] libai INFO: Rank of current process: 1. World size: 2
[08/24 03:36:26] libai INFO: Command line arguments: Namespace(config_file='projects/RWKV_v4/configs/config_test.py', eval_only=False, fast_dev_run=False, opts=[], resume=False)
[08/24 03:36:26] libai INFO: Contents of args.config_file=projects/RWKV_v4/configs/config_test.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_config[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mtokenizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT2Tokenizer[39m
[38;5;242m# 配置 dataloader `build_image_train_loader` 和 `build_image_test_loader` 是 LiBai 提供的用于创建图像数据的训练集和测试集 DataLoader 的两个函数[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_nlp_test_loader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_nlp_train_loader[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15moneflow[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mflow[39m

[38;5;242m# 配置 model[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmodel[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT[39m[38;5;15m [39m[38;5;15m,[39m[38;5;15mGPTConfig[39m
[38;5;242m# 导入自定义的 dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mdataset[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mRWKVDataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mutils[39m[38;5;15m.[39m[38;5;15mconfig_optimizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_RWKV_v4_config_optim[39m


[38;5;15mtest[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15menable[39m[38;5;197m=[39m[38;5;81mFalse[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mweight_style[39m[38;5;197m=[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;186m"[39m[38;5;186mpytorch[39m[38;5;186m"[39m
[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mpath[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/RWKV-v4/for_load.pth[39m[38;5;186m"[39m

[38;5;15mgraph[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/models/graph.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mgraph[39m

[38;5;15mgraph[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m
[38;5;15mgraph[39m[38;5;197m.[39m[38;5;15mdebug[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m2[39m

[38;5;242m# optim = get_config("common/optim.py").optim[39m
[38;5;15moptim[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mAdam[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mparams[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mget_RWKV_v4_config_optim[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr[39m[38;5;197m=[39m[38;5;141m8e-4[39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;242m# 配置model[39m
[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mGPT[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mvocab_size[39m[38;5;197m=[39m[38;5;141m6064[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mmodel_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mRWKV[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_layer[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_embd[39m[38;5;197m=[39m[38;5;141m1024[39m
[38;5;15m)[39m

[38;5;242m# 训练过程[39m
[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/train.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mtrain[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minput_placement_device[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mcpu[39m[38;5;186m"[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mdist[39m[38;5;197m.[39m[38;5;15mpipeline_num_layers[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m6[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_micro_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mscheduler[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mlr_scheduler[39m[38;5;197m.[39m[38;5;15mStepLR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mstep_size[39m[38;5;197m=[39m[38;5;141m1000[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m        [39m[38;5;15mgamma[39m[38;5;197m=[39m[38;5;141m1.0[39m
[38;5;15m)[39m[38;5;15m [39m

[38;5;242m# false = fp32[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mdatafile[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/data/enwik8[39m[38;5;186m"[39m
[38;5;242m# 获得一个 DataLoader 的配置对象[39m
[38;5;15mdataloader[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mbuild_nlp_train_loader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mdataset[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m        [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mRWKVDataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_dir[39m[38;5;197m=[39m[38;5;15mdatafile[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mepoch_length_fixed[39m[38;5;197m=[39m[38;5;141m9996[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# train.train_iter=3[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_epoch[39m[38;5;197m=[39m[38;5;141m1[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186moutput/rwkv_output_loss_compare[39m[38;5;186m"[39m
[38;5;242m# train.load_weight = "/home/zhangxiaoyu/RWKV-LM/libai/projects/RWKV_v4/model/output_model/" # 采用同一个model进行初始化[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mrdma_enabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# model.cfg.hidden_dropout_prob= 0.0 # 关闭所有的dropout[39m
[38;5;242m# model.cfg.attention_probs_dropout_prob= 0.0[39m
[38;5;242m# model.cfg.bias_dropout_fusion= False[39m

[38;5;242m# train.dist.pipeline_parallel_size=2[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mevaluation[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# train.train_iter=5[39m
[38;5;242m# train.dist.tensor_parallel_size = 2  # 并行度为 4 的模型并行[39m
[38;5;242m# train.dist.tensor_parallel_size = 4  # 并行度为 4 的模型并行[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mactivation_checkpoint[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m [39m

[08/24 03:36:26] libai.engine.default INFO: Prepare training, validating, testing set
[08/24 03:36:28] libai.engine.default INFO: Auto-scaling the config to train.train_iter=10000, train.warmup_iter=0
[08/24 03:36:32] libai.engine.default INFO: Model:
GPT(
  (emb): VocabEmbedding(num_embeddings=6064, embedding_dim=1024)
  (blocks): Sequential(
    (0): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln0): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (1): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (2): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (3): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (4): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (5): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
  )
  (ln_out): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
  (head): Linear1D(in_features=1024, out_features=6064, bias=False, parallel=row)
  (head_q): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
  (head_k): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
)
[08/24 03:36:32] libai.engine.default INFO: Graph debug mode on, automatically output debug info.
[08/24 03:36:32] libai.engine.default INFO: Graph debug mode on, automatically output debug info.
[08/24 03:36:32] libai.engine.trainer INFO: Starting training from iteration 0
[08/24 03:36:33] libai.models.utils.graph_base INFO: Start compling the train graph which may take some time. Please wait for a moment ...
[08/24 03:37:51] libai INFO: Rank of current process: 1. World size: 2
[08/24 03:37:51] libai INFO: Command line arguments: Namespace(config_file='projects/RWKV_v4/configs/config_test.py', eval_only=False, fast_dev_run=False, opts=[], resume=False)
[08/24 03:37:51] libai INFO: Contents of args.config_file=projects/RWKV_v4/configs/config_test.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_config[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mtokenizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT2Tokenizer[39m
[38;5;242m# 配置 dataloader `build_image_train_loader` 和 `build_image_test_loader` 是 LiBai 提供的用于创建图像数据的训练集和测试集 DataLoader 的两个函数[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_nlp_test_loader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_nlp_train_loader[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15moneflow[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mflow[39m

[38;5;242m# 配置 model[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmodel[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT[39m[38;5;15m [39m[38;5;15m,[39m[38;5;15mGPTConfig[39m
[38;5;242m# 导入自定义的 dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mdataset[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mRWKVDataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mutils[39m[38;5;15m.[39m[38;5;15mconfig_optimizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_RWKV_v4_config_optim[39m


[38;5;15mtest[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15menable[39m[38;5;197m=[39m[38;5;81mFalse[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mweight_style[39m[38;5;197m=[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;186m"[39m[38;5;186mpytorch[39m[38;5;186m"[39m
[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mpath[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/RWKV-v4/for_load.pth[39m[38;5;186m"[39m

[38;5;15mgraph[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/models/graph.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mgraph[39m

[38;5;15mgraph[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;242m# optim = get_config("common/optim.py").optim[39m
[38;5;15moptim[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mAdam[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mparams[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mget_RWKV_v4_config_optim[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr[39m[38;5;197m=[39m[38;5;141m8e-4[39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;242m# 配置model[39m
[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mGPT[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mvocab_size[39m[38;5;197m=[39m[38;5;141m6064[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mmodel_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mRWKV[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_layer[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_embd[39m[38;5;197m=[39m[38;5;141m1024[39m
[38;5;15m)[39m

[38;5;242m# 训练过程[39m
[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/train.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mtrain[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minput_placement_device[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mcpu[39m[38;5;186m"[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mdist[39m[38;5;197m.[39m[38;5;15mpipeline_num_layers[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m6[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_micro_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mscheduler[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mlr_scheduler[39m[38;5;197m.[39m[38;5;15mStepLR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mstep_size[39m[38;5;197m=[39m[38;5;141m1000[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m        [39m[38;5;15mgamma[39m[38;5;197m=[39m[38;5;141m1.0[39m
[38;5;15m)[39m[38;5;15m [39m

[38;5;242m# false = fp32[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mdatafile[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/data/enwik8[39m[38;5;186m"[39m
[38;5;242m# 获得一个 DataLoader 的配置对象[39m
[38;5;15mdataloader[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mbuild_nlp_train_loader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mdataset[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m        [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mRWKVDataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_dir[39m[38;5;197m=[39m[38;5;15mdatafile[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mepoch_length_fixed[39m[38;5;197m=[39m[38;5;141m9996[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# train.train_iter=3[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_epoch[39m[38;5;197m=[39m[38;5;141m1[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186moutput/rwkv_output_loss_compare[39m[38;5;186m"[39m
[38;5;242m# train.load_weight = "/home/zhangxiaoyu/RWKV-LM/libai/projects/RWKV_v4/model/output_model/" # 采用同一个model进行初始化[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mrdma_enabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# model.cfg.hidden_dropout_prob= 0.0 # 关闭所有的dropout[39m
[38;5;242m# model.cfg.attention_probs_dropout_prob= 0.0[39m
[38;5;242m# model.cfg.bias_dropout_fusion= False[39m

[38;5;242m# train.dist.pipeline_parallel_size=2[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mevaluation[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# train.train_iter=5[39m
[38;5;242m# train.dist.tensor_parallel_size = 2  # 并行度为 4 的模型并行[39m
[38;5;242m# train.dist.tensor_parallel_size = 4  # 并行度为 4 的模型并行[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mactivation_checkpoint[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m [39m

[08/24 03:37:52] libai.engine.default INFO: Prepare training, validating, testing set
[08/24 03:37:53] libai.engine.default INFO: Auto-scaling the config to train.train_iter=10000, train.warmup_iter=0
[08/24 03:37:57] libai.engine.default INFO: Model:
GPT(
  (emb): VocabEmbedding(num_embeddings=6064, embedding_dim=1024)
  (blocks): Sequential(
    (0): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln0): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (1): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (2): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (3): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (4): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (5): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
  )
  (ln_out): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
  (head): Linear1D(in_features=1024, out_features=6064, bias=False, parallel=row)
  (head_q): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
  (head_k): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
)
[08/24 03:37:57] libai.engine.trainer INFO: Starting training from iteration 0
[08/24 03:37:58] libai.models.utils.graph_base INFO: Start compling the train graph which may take some time. Please wait for a moment ...
[08/24 03:42:22] libai INFO: Rank of current process: 1. World size: 2
[08/24 03:42:22] libai INFO: Command line arguments: Namespace(config_file='projects/RWKV_v4/configs/config_test.py', eval_only=False, fast_dev_run=False, opts=[], resume=False)
[08/24 03:42:23] libai INFO: Contents of args.config_file=projects/RWKV_v4/configs/config_test.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_config[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mtokenizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT2Tokenizer[39m
[38;5;242m# 配置 dataloader `build_image_train_loader` 和 `build_image_test_loader` 是 LiBai 提供的用于创建图像数据的训练集和测试集 DataLoader 的两个函数[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_nlp_test_loader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_nlp_train_loader[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15moneflow[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mflow[39m

[38;5;242m# 配置 model[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmodel[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT[39m[38;5;15m [39m[38;5;15m,[39m[38;5;15mGPTConfig[39m
[38;5;242m# 导入自定义的 dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mdataset[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mRWKVDataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mutils[39m[38;5;15m.[39m[38;5;15mconfig_optimizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_RWKV_v4_config_optim[39m


[38;5;15mtest[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15menable[39m[38;5;197m=[39m[38;5;81mFalse[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mweight_style[39m[38;5;197m=[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;186m"[39m[38;5;186mpytorch[39m[38;5;186m"[39m
[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mpath[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/RWKV-v4/for_load.pth[39m[38;5;186m"[39m

[38;5;15mgraph[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/models/graph.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mgraph[39m

[38;5;15mgraph[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;242m# optim = get_config("common/optim.py").optim[39m
[38;5;15moptim[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mAdam[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mparams[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mget_RWKV_v4_config_optim[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr[39m[38;5;197m=[39m[38;5;141m8e-4[39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;242m# 配置model[39m
[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mGPT[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mvocab_size[39m[38;5;197m=[39m[38;5;141m6064[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mmodel_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mRWKV[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_layer[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_embd[39m[38;5;197m=[39m[38;5;141m1024[39m
[38;5;15m)[39m

[38;5;242m# 训练过程[39m
[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/train.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mtrain[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minput_placement_device[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mcpu[39m[38;5;186m"[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mdist[39m[38;5;197m.[39m[38;5;15mpipeline_num_layers[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m6[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_micro_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mscheduler[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mlr_scheduler[39m[38;5;197m.[39m[38;5;15mStepLR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mstep_size[39m[38;5;197m=[39m[38;5;141m1000[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m        [39m[38;5;15mgamma[39m[38;5;197m=[39m[38;5;141m1.0[39m
[38;5;15m)[39m[38;5;15m [39m

[38;5;242m# false = fp32[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mdatafile[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/data/enwik8[39m[38;5;186m"[39m
[38;5;242m# 获得一个 DataLoader 的配置对象[39m
[38;5;15mdataloader[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mbuild_nlp_train_loader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mdataset[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m        [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mRWKVDataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_dir[39m[38;5;197m=[39m[38;5;15mdatafile[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mepoch_length_fixed[39m[38;5;197m=[39m[38;5;141m9996[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# train.train_iter=3[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_epoch[39m[38;5;197m=[39m[38;5;141m1[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186moutput/rwkv_output_loss_compare[39m[38;5;186m"[39m
[38;5;242m# train.load_weight = "/home/zhangxiaoyu/RWKV-LM/libai/projects/RWKV_v4/model/output_model/" # 采用同一个model进行初始化[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mrdma_enabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# model.cfg.hidden_dropout_prob= 0.0 # 关闭所有的dropout[39m
[38;5;242m# model.cfg.attention_probs_dropout_prob= 0.0[39m
[38;5;242m# model.cfg.bias_dropout_fusion= False[39m

[38;5;242m# train.dist.pipeline_parallel_size=2[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mevaluation[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# train.train_iter=5[39m
[38;5;242m# train.dist.tensor_parallel_size = 2  # 并行度为 4 的模型并行[39m
[38;5;242m# train.dist.tensor_parallel_size = 4  # 并行度为 4 的模型并行[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mactivation_checkpoint[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m [39m

[08/24 03:42:23] libai.engine.default INFO: Prepare training, validating, testing set
[08/24 03:42:24] libai.engine.default INFO: Auto-scaling the config to train.train_iter=10000, train.warmup_iter=0
[08/24 03:42:28] libai.engine.default INFO: Model:
GPT(
  (emb): VocabEmbedding(num_embeddings=6064, embedding_dim=1024)
  (blocks): Sequential(
    (0): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln0): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (1): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (2): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (3): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (4): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (5): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
  )
  (ln_out): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
  (head): Linear1D(in_features=1024, out_features=6064, bias=False, parallel=row)
  (head_q): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
  (head_k): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
)
[08/24 03:42:28] libai.engine.trainer INFO: Starting training from iteration 0
[08/24 03:42:29] libai.models.utils.graph_base INFO: Start compling the train graph which may take some time. Please wait for a moment ...
[08/24 03:42:29] libai.engine.hooks INFO: Total training time: 0:00:00 (0:00:00 on hooks)
[08/24 03:47:39] libai INFO: Rank of current process: 1. World size: 2
[08/24 03:47:39] libai INFO: Command line arguments: Namespace(config_file='projects/RWKV_v4/configs/config_test.py', eval_only=False, fast_dev_run=False, opts=[], resume=False)
[08/24 03:47:39] libai INFO: Contents of args.config_file=projects/RWKV_v4/configs/config_test.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_config[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mtokenizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT2Tokenizer[39m
[38;5;242m# 配置 dataloader `build_image_train_loader` 和 `build_image_test_loader` 是 LiBai 提供的用于创建图像数据的训练集和测试集 DataLoader 的两个函数[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_nlp_test_loader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_nlp_train_loader[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15moneflow[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mflow[39m

[38;5;242m# 配置 model[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmodel[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT[39m[38;5;15m [39m[38;5;15m,[39m[38;5;15mGPTConfig[39m
[38;5;242m# 导入自定义的 dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mdataset[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mRWKVDataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mutils[39m[38;5;15m.[39m[38;5;15mconfig_optimizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_RWKV_v4_config_optim[39m


[38;5;15mtest[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15menable[39m[38;5;197m=[39m[38;5;81mFalse[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mweight_style[39m[38;5;197m=[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;186m"[39m[38;5;186mpytorch[39m[38;5;186m"[39m
[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mpath[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/RWKV-v4/for_load.pth[39m[38;5;186m"[39m

[38;5;15mgraph[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/models/graph.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mgraph[39m

[38;5;15mgraph[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;242m# optim = get_config("common/optim.py").optim[39m
[38;5;15moptim[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mAdam[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mparams[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mget_RWKV_v4_config_optim[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr[39m[38;5;197m=[39m[38;5;141m8e-4[39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;242m# 配置model[39m
[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mGPT[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mvocab_size[39m[38;5;197m=[39m[38;5;141m6064[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mmodel_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mRWKV[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_layer[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_embd[39m[38;5;197m=[39m[38;5;141m1024[39m
[38;5;15m)[39m

[38;5;242m# 训练过程[39m
[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/train.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mtrain[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minput_placement_device[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mcpu[39m[38;5;186m"[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mdist[39m[38;5;197m.[39m[38;5;15mpipeline_num_layers[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m6[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_micro_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mscheduler[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mlr_scheduler[39m[38;5;197m.[39m[38;5;15mStepLR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mstep_size[39m[38;5;197m=[39m[38;5;141m1000[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m        [39m[38;5;15mgamma[39m[38;5;197m=[39m[38;5;141m1.0[39m
[38;5;15m)[39m[38;5;15m [39m

[38;5;242m# false = fp32[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mdatafile[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/data/enwik8[39m[38;5;186m"[39m
[38;5;242m# 获得一个 DataLoader 的配置对象[39m
[38;5;15mdataloader[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mbuild_nlp_train_loader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mdataset[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m        [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mRWKVDataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_dir[39m[38;5;197m=[39m[38;5;15mdatafile[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mepoch_length_fixed[39m[38;5;197m=[39m[38;5;141m9996[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# train.train_iter=3[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_epoch[39m[38;5;197m=[39m[38;5;141m1[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186moutput/rwkv_output_loss_compare[39m[38;5;186m"[39m
[38;5;242m# train.load_weight = "/home/zhangxiaoyu/RWKV-LM/libai/projects/RWKV_v4/model/output_model/" # 采用同一个model进行初始化[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mrdma_enabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# model.cfg.hidden_dropout_prob= 0.0 # 关闭所有的dropout[39m
[38;5;242m# model.cfg.attention_probs_dropout_prob= 0.0[39m
[38;5;242m# model.cfg.bias_dropout_fusion= False[39m

[38;5;242m# train.dist.pipeline_parallel_size=2[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mevaluation[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# train.train_iter=5[39m
[38;5;242m# train.dist.tensor_parallel_size = 2  # 并行度为 4 的模型并行[39m
[38;5;242m# train.dist.tensor_parallel_size = 4  # 并行度为 4 的模型并行[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mactivation_checkpoint[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m [39m

[08/24 03:47:39] libai.engine.default INFO: Prepare training, validating, testing set
[08/24 03:47:41] libai.engine.default INFO: Auto-scaling the config to train.train_iter=10000, train.warmup_iter=0
[08/24 03:47:45] libai.engine.default INFO: Model:
GPT(
  (emb): VocabEmbedding(num_embeddings=6064, embedding_dim=1024)
  (blocks): Sequential(
    (0): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln0): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (1): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (2): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (3): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (4): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (5): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
  )
  (ln_out): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
  (head): Linear1D(in_features=1024, out_features=6064, bias=False, parallel=row)
  (head_q): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
  (head_k): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
)
[08/24 03:47:45] libai.engine.trainer INFO: Starting training from iteration 0
[08/24 03:47:45] libai.models.utils.graph_base INFO: Start compling the train graph which may take some time. Please wait for a moment ...
[08/24 03:47:45] libai.engine.hooks INFO: Total training time: 0:00:00 (0:00:00 on hooks)
[08/24 03:57:47] libai INFO: Rank of current process: 1. World size: 2
[08/24 03:57:47] libai INFO: Command line arguments: Namespace(config_file='projects/RWKV_v4/configs/config_test.py', eval_only=False, fast_dev_run=False, opts=[], resume=False)
[08/24 03:57:47] libai INFO: Contents of args.config_file=projects/RWKV_v4/configs/config_test.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_config[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mtokenizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT2Tokenizer[39m
[38;5;242m# 配置 dataloader `build_image_train_loader` 和 `build_image_test_loader` 是 LiBai 提供的用于创建图像数据的训练集和测试集 DataLoader 的两个函数[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_nlp_test_loader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_nlp_train_loader[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15moneflow[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mflow[39m

[38;5;242m# 配置 model[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmodel[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT[39m[38;5;15m [39m[38;5;15m,[39m[38;5;15mGPTConfig[39m
[38;5;242m# 导入自定义的 dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mdataset[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mRWKVDataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mutils[39m[38;5;15m.[39m[38;5;15mconfig_optimizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_RWKV_v4_config_optim[39m


[38;5;15mtest[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15menable[39m[38;5;197m=[39m[38;5;81mFalse[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mweight_style[39m[38;5;197m=[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;186m"[39m[38;5;186mpytorch[39m[38;5;186m"[39m
[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mpath[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/RWKV-v4/for_load.pth[39m[38;5;186m"[39m

[38;5;15mgraph[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/models/graph.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mgraph[39m

[38;5;15mgraph[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;242m# optim = get_config("common/optim.py").optim[39m
[38;5;15moptim[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mAdam[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mparams[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mget_RWKV_v4_config_optim[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr[39m[38;5;197m=[39m[38;5;141m8e-4[39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;242m# 配置model[39m
[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mGPT[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mvocab_size[39m[38;5;197m=[39m[38;5;141m6064[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mmodel_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mRWKV[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_layer[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_embd[39m[38;5;197m=[39m[38;5;141m1024[39m
[38;5;15m)[39m

[38;5;242m# 训练过程[39m
[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/train.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mtrain[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minput_placement_device[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mcpu[39m[38;5;186m"[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mdist[39m[38;5;197m.[39m[38;5;15mpipeline_num_layers[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m6[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_micro_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mscheduler[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mlr_scheduler[39m[38;5;197m.[39m[38;5;15mStepLR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mstep_size[39m[38;5;197m=[39m[38;5;141m1000[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m        [39m[38;5;15mgamma[39m[38;5;197m=[39m[38;5;141m1.0[39m
[38;5;15m)[39m[38;5;15m [39m

[38;5;242m# false = fp32[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mdatafile[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/data/enwik8[39m[38;5;186m"[39m
[38;5;242m# 获得一个 DataLoader 的配置对象[39m
[38;5;15mdataloader[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mbuild_nlp_train_loader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mdataset[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m        [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mRWKVDataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_dir[39m[38;5;197m=[39m[38;5;15mdatafile[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mepoch_length_fixed[39m[38;5;197m=[39m[38;5;141m9996[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# train.train_iter=3[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_epoch[39m[38;5;197m=[39m[38;5;141m1[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186moutput/rwkv_output_loss_compare[39m[38;5;186m"[39m
[38;5;242m# train.load_weight = "/home/zhangxiaoyu/RWKV-LM/libai/projects/RWKV_v4/model/output_model/" # 采用同一个model进行初始化[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mrdma_enabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# model.cfg.hidden_dropout_prob= 0.0 # 关闭所有的dropout[39m
[38;5;242m# model.cfg.attention_probs_dropout_prob= 0.0[39m
[38;5;242m# model.cfg.bias_dropout_fusion= False[39m

[38;5;242m# train.dist.pipeline_parallel_size=2[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mevaluation[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# train.train_iter=5[39m
[38;5;242m# train.dist.tensor_parallel_size = 2  # 并行度为 4 的模型并行[39m
[38;5;242m# train.dist.tensor_parallel_size = 4  # 并行度为 4 的模型并行[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mactivation_checkpoint[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m [39m

[08/24 03:57:47] libai.engine.default INFO: Prepare training, validating, testing set
[08/24 03:57:49] libai.engine.default INFO: Auto-scaling the config to train.train_iter=10000, train.warmup_iter=0
[08/24 03:57:53] libai.engine.default INFO: Model:
GPT(
  (emb): VocabEmbedding(num_embeddings=6064, embedding_dim=1024)
  (blocks): Sequential(
    (0): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln0): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (1): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (2): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (3): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (4): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (5): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
  )
  (ln_out): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
  (head): Linear1D(in_features=1024, out_features=6064, bias=False, parallel=row)
  (head_q): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
  (head_k): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
)
[08/24 03:57:53] libai.engine.trainer INFO: Starting training from iteration 0
[08/24 03:57:54] libai.models.utils.graph_base INFO: Start compling the train graph which may take some time. Please wait for a moment ...
[08/24 03:57:54] libai.engine.hooks INFO: Total training time: 0:00:00 (0:00:00 on hooks)
[08/24 03:58:13] libai INFO: Rank of current process: 1. World size: 2
[08/24 03:58:13] libai INFO: Command line arguments: Namespace(config_file='projects/RWKV_v4/configs/config_test.py', eval_only=False, fast_dev_run=False, opts=[], resume=False)
[08/24 03:58:13] libai INFO: Contents of args.config_file=projects/RWKV_v4/configs/config_test.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_config[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mtokenizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT2Tokenizer[39m
[38;5;242m# 配置 dataloader `build_image_train_loader` 和 `build_image_test_loader` 是 LiBai 提供的用于创建图像数据的训练集和测试集 DataLoader 的两个函数[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_nlp_test_loader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_nlp_train_loader[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15moneflow[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mflow[39m

[38;5;242m# 配置 model[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmodel[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT[39m[38;5;15m [39m[38;5;15m,[39m[38;5;15mGPTConfig[39m
[38;5;242m# 导入自定义的 dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mdataset[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mRWKVDataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mutils[39m[38;5;15m.[39m[38;5;15mconfig_optimizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_RWKV_v4_config_optim[39m


[38;5;15mtest[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15menable[39m[38;5;197m=[39m[38;5;81mFalse[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mweight_style[39m[38;5;197m=[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;186m"[39m[38;5;186mpytorch[39m[38;5;186m"[39m
[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mpath[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/RWKV-v4/for_load.pth[39m[38;5;186m"[39m

[38;5;15mgraph[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/models/graph.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mgraph[39m

[38;5;15mgraph[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;242m# optim = get_config("common/optim.py").optim[39m
[38;5;15moptim[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mAdam[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mparams[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mget_RWKV_v4_config_optim[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr[39m[38;5;197m=[39m[38;5;141m8e-4[39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;242m# 配置model[39m
[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mGPT[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mvocab_size[39m[38;5;197m=[39m[38;5;141m6064[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mmodel_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mRWKV[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_layer[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_embd[39m[38;5;197m=[39m[38;5;141m1024[39m
[38;5;15m)[39m

[38;5;242m# 训练过程[39m
[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/train.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mtrain[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minput_placement_device[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mcpu[39m[38;5;186m"[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mdist[39m[38;5;197m.[39m[38;5;15mpipeline_num_layers[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m6[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_micro_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mscheduler[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mlr_scheduler[39m[38;5;197m.[39m[38;5;15mStepLR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mstep_size[39m[38;5;197m=[39m[38;5;141m1000[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m        [39m[38;5;15mgamma[39m[38;5;197m=[39m[38;5;141m1.0[39m
[38;5;15m)[39m[38;5;15m [39m

[38;5;242m# false = fp32[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mdatafile[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/data/enwik8[39m[38;5;186m"[39m
[38;5;242m# 获得一个 DataLoader 的配置对象[39m
[38;5;15mdataloader[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mbuild_nlp_train_loader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mdataset[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m        [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mRWKVDataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_dir[39m[38;5;197m=[39m[38;5;15mdatafile[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mepoch_length_fixed[39m[38;5;197m=[39m[38;5;141m9996[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# train.train_iter=3[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_epoch[39m[38;5;197m=[39m[38;5;141m1[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186moutput/rwkv_output_loss_compare[39m[38;5;186m"[39m
[38;5;242m# train.load_weight = "/home/zhangxiaoyu/RWKV-LM/libai/projects/RWKV_v4/model/output_model/" # 采用同一个model进行初始化[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mrdma_enabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# model.cfg.hidden_dropout_prob= 0.0 # 关闭所有的dropout[39m
[38;5;242m# model.cfg.attention_probs_dropout_prob= 0.0[39m
[38;5;242m# model.cfg.bias_dropout_fusion= False[39m

[38;5;242m# train.dist.pipeline_parallel_size=2[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mevaluation[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# train.train_iter=5[39m
[38;5;242m# train.dist.tensor_parallel_size = 2  # 并行度为 4 的模型并行[39m
[38;5;242m# train.dist.tensor_parallel_size = 4  # 并行度为 4 的模型并行[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mactivation_checkpoint[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m [39m

[08/24 03:58:13] libai.engine.default INFO: Prepare training, validating, testing set
[08/24 03:58:15] libai.engine.default INFO: Auto-scaling the config to train.train_iter=10000, train.warmup_iter=0
[08/24 03:58:19] libai.engine.default INFO: Model:
GPT(
  (emb): VocabEmbedding(num_embeddings=6064, embedding_dim=1024)
  (blocks): Sequential(
    (0): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln0): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (1): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (2): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (3): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (4): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (5): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
  )
  (ln_out): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
  (head): Linear1D(in_features=1024, out_features=6064, bias=False, parallel=row)
  (head_q): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
  (head_k): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
)
[08/24 03:58:19] libai.engine.trainer INFO: Starting training from iteration 0
[08/24 03:58:19] libai.models.utils.graph_base INFO: Start compling the train graph which may take some time. Please wait for a moment ...
[08/24 04:07:55] libai INFO: Rank of current process: 1. World size: 2
[08/24 04:07:55] libai INFO: Command line arguments: Namespace(config_file='projects/RWKV_v4/configs/config_test.py', eval_only=False, fast_dev_run=False, opts=[], resume=False)
[08/24 04:07:55] libai INFO: Contents of args.config_file=projects/RWKV_v4/configs/config_test.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_config[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mtokenizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT2Tokenizer[39m
[38;5;242m# 配置 dataloader `build_image_train_loader` 和 `build_image_test_loader` 是 LiBai 提供的用于创建图像数据的训练集和测试集 DataLoader 的两个函数[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_nlp_test_loader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_nlp_train_loader[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15moneflow[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mflow[39m

[38;5;242m# 配置 model[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmodel[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT[39m[38;5;15m [39m[38;5;15m,[39m[38;5;15mGPTConfig[39m
[38;5;242m# 导入自定义的 dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mdataset[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mRWKVDataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mutils[39m[38;5;15m.[39m[38;5;15mconfig_optimizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_RWKV_v4_config_optim[39m


[38;5;15mtest[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15menable[39m[38;5;197m=[39m[38;5;81mFalse[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mweight_style[39m[38;5;197m=[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;186m"[39m[38;5;186mpytorch[39m[38;5;186m"[39m
[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mpath[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/RWKV-v4/for_load.pth[39m[38;5;186m"[39m

[38;5;15mgraph[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/models/graph.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mgraph[39m

[38;5;15mgraph[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;242m# optim = get_config("common/optim.py").optim[39m
[38;5;15moptim[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mAdam[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mparams[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mget_RWKV_v4_config_optim[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr[39m[38;5;197m=[39m[38;5;141m8e-4[39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;242m# 配置model[39m
[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mGPT[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mvocab_size[39m[38;5;197m=[39m[38;5;141m6064[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mmodel_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mRWKV[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_layer[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_embd[39m[38;5;197m=[39m[38;5;141m1024[39m
[38;5;15m)[39m

[38;5;242m# 训练过程[39m
[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/train.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mtrain[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minput_placement_device[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mcpu[39m[38;5;186m"[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mdist[39m[38;5;197m.[39m[38;5;15mpipeline_num_layers[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m6[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_micro_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mscheduler[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mlr_scheduler[39m[38;5;197m.[39m[38;5;15mStepLR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mstep_size[39m[38;5;197m=[39m[38;5;141m1000[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m        [39m[38;5;15mgamma[39m[38;5;197m=[39m[38;5;141m1.0[39m
[38;5;15m)[39m[38;5;15m [39m

[38;5;242m# false = fp32[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mdatafile[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/data/enwik8[39m[38;5;186m"[39m
[38;5;242m# 获得一个 DataLoader 的配置对象[39m
[38;5;15mdataloader[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mbuild_nlp_train_loader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mdataset[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m        [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mRWKVDataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_dir[39m[38;5;197m=[39m[38;5;15mdatafile[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mepoch_length_fixed[39m[38;5;197m=[39m[38;5;141m9996[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# train.train_iter=3[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_epoch[39m[38;5;197m=[39m[38;5;141m1[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186moutput/rwkv_output_loss_compare[39m[38;5;186m"[39m
[38;5;242m# train.load_weight = "/home/zhangxiaoyu/RWKV-LM/libai/projects/RWKV_v4/model/output_model/" # 采用同一个model进行初始化[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mrdma_enabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# model.cfg.hidden_dropout_prob= 0.0 # 关闭所有的dropout[39m
[38;5;242m# model.cfg.attention_probs_dropout_prob= 0.0[39m
[38;5;242m# model.cfg.bias_dropout_fusion= False[39m

[38;5;242m# train.dist.pipeline_parallel_size=2[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mevaluation[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# train.train_iter=5[39m
[38;5;242m# train.dist.tensor_parallel_size = 2  # 并行度为 4 的模型并行[39m
[38;5;242m# train.dist.tensor_parallel_size = 4  # 并行度为 4 的模型并行[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mactivation_checkpoint[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m [39m

[08/24 04:07:55] libai.engine.default INFO: Prepare training, validating, testing set
[08/24 04:07:57] libai.engine.default INFO: Auto-scaling the config to train.train_iter=10000, train.warmup_iter=0
[08/24 04:08:01] libai.engine.default INFO: Model:
GPT(
  (emb): VocabEmbedding(num_embeddings=6064, embedding_dim=1024)
  (blocks): Sequential(
    (0): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln0): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (1): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (2): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (3): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (4): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (5): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
  )
  (ln_out): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
  (head): Linear1D(in_features=1024, out_features=6064, bias=False, parallel=row)
  (head_q): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
  (head_k): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
)
[08/24 04:08:01] libai.engine.trainer INFO: Starting training from iteration 0
[08/24 04:08:02] libai.models.utils.graph_base INFO: Start compling the train graph which may take some time. Please wait for a moment ...
[08/24 08:13:27] libai INFO: Rank of current process: 1. World size: 2
[08/24 08:13:27] libai INFO: Command line arguments: Namespace(config_file='projects/RWKV_v4/configs/config_test.py', eval_only=False, fast_dev_run=False, opts=[], resume=False)
[08/24 08:13:27] libai INFO: Contents of args.config_file=projects/RWKV_v4/configs/config_test.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_config[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mtokenizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT2Tokenizer[39m
[38;5;242m# 配置 dataloader `build_image_train_loader` 和 `build_image_test_loader` 是 LiBai 提供的用于创建图像数据的训练集和测试集 DataLoader 的两个函数[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_nlp_test_loader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_nlp_train_loader[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15moneflow[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mflow[39m

[38;5;242m# 配置 model[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmodel[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT[39m[38;5;15m [39m[38;5;15m,[39m[38;5;15mGPTConfig[39m
[38;5;242m# 导入自定义的 dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mdataset[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mRWKVDataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mutils[39m[38;5;15m.[39m[38;5;15mconfig_optimizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_RWKV_v4_config_optim[39m


[38;5;15mtest[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15menable[39m[38;5;197m=[39m[38;5;81mFalse[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mweight_style[39m[38;5;197m=[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;186m"[39m[38;5;186mpytorch[39m[38;5;186m"[39m
[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mpath[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/RWKV-v4/for_load.pth[39m[38;5;186m"[39m

[38;5;15mgraph[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/models/graph.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mgraph[39m

[38;5;15mgraph[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;242m# optim = get_config("common/optim.py").optim[39m
[38;5;15moptim[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mAdam[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mparams[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mget_RWKV_v4_config_optim[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr[39m[38;5;197m=[39m[38;5;141m8e-4[39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;242m# 配置model[39m
[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mGPT[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mvocab_size[39m[38;5;197m=[39m[38;5;141m6064[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mmodel_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mRWKV[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_layer[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_embd[39m[38;5;197m=[39m[38;5;141m1024[39m
[38;5;15m)[39m

[38;5;242m# 训练过程[39m
[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/train.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mtrain[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minput_placement_device[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mcpu[39m[38;5;186m"[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mdist[39m[38;5;197m.[39m[38;5;15mpipeline_num_layers[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m6[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_micro_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mscheduler[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mlr_scheduler[39m[38;5;197m.[39m[38;5;15mStepLR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mstep_size[39m[38;5;197m=[39m[38;5;141m1000[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m        [39m[38;5;15mgamma[39m[38;5;197m=[39m[38;5;141m1.0[39m
[38;5;15m)[39m[38;5;15m [39m

[38;5;242m# false = fp32[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mdatafile[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/data/enwik8[39m[38;5;186m"[39m
[38;5;242m# 获得一个 DataLoader 的配置对象[39m
[38;5;15mdataloader[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mbuild_nlp_train_loader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mdataset[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m        [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mRWKVDataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_dir[39m[38;5;197m=[39m[38;5;15mdatafile[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mepoch_length_fixed[39m[38;5;197m=[39m[38;5;141m9996[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# train.train_iter=3[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_epoch[39m[38;5;197m=[39m[38;5;141m1[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186moutput/rwkv_output_loss_compare[39m[38;5;186m"[39m
[38;5;242m# train.load_weight = "/home/zhangxiaoyu/RWKV-LM/libai/projects/RWKV_v4/model/output_model/" # 采用同一个model进行初始化[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mrdma_enabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# model.cfg.hidden_dropout_prob= 0.0 # 关闭所有的dropout[39m
[38;5;242m# model.cfg.attention_probs_dropout_prob= 0.0[39m
[38;5;242m# model.cfg.bias_dropout_fusion= False[39m

[38;5;242m# train.dist.pipeline_parallel_size=2[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mevaluation[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# train.train_iter=5[39m
[38;5;242m# train.dist.tensor_parallel_size = 2  # 并行度为 4 的模型并行[39m
[38;5;242m# train.dist.tensor_parallel_size = 4  # 并行度为 4 的模型并行[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mactivation_checkpoint[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m [39m

[08/24 08:13:27] libai.engine.default INFO: Prepare training, validating, testing set
[08/24 08:13:29] libai.engine.default INFO: Auto-scaling the config to train.train_iter=10000, train.warmup_iter=0
[08/24 08:13:33] libai.engine.default INFO: Model:
GPT(
  (emb): VocabEmbedding(num_embeddings=6064, embedding_dim=1024)
  (blocks): Sequential(
    (0): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln0): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (1): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (2): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (3): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (4): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (5): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
  )
  (ln_out): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
  (head): Linear1D(in_features=1024, out_features=6064, bias=False, parallel=row)
  (head_q): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
  (head_k): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
)
[08/24 08:13:33] libai.engine.trainer INFO: Starting training from iteration 0
[08/24 08:13:34] libai.models.utils.graph_base INFO: Start compling the train graph which may take some time. Please wait for a moment ...
[08/24 08:14:40] libai INFO: Rank of current process: 1. World size: 2
[08/24 08:14:40] libai INFO: Command line arguments: Namespace(config_file='projects/RWKV_v4/configs/config_test.py', eval_only=False, fast_dev_run=False, opts=[], resume=False)
[08/24 08:14:40] libai INFO: Contents of args.config_file=projects/RWKV_v4/configs/config_test.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_config[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mtokenizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT2Tokenizer[39m
[38;5;242m# 配置 dataloader `build_image_train_loader` 和 `build_image_test_loader` 是 LiBai 提供的用于创建图像数据的训练集和测试集 DataLoader 的两个函数[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_nlp_test_loader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_nlp_train_loader[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15moneflow[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mflow[39m

[38;5;242m# 配置 model[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmodel[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT[39m[38;5;15m [39m[38;5;15m,[39m[38;5;15mGPTConfig[39m
[38;5;242m# 导入自定义的 dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mdataset[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mRWKVDataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mutils[39m[38;5;15m.[39m[38;5;15mconfig_optimizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_RWKV_v4_config_optim[39m


[38;5;15mtest[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15menable[39m[38;5;197m=[39m[38;5;81mFalse[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mweight_style[39m[38;5;197m=[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;186m"[39m[38;5;186mpytorch[39m[38;5;186m"[39m
[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mpath[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/RWKV-v4/for_load.pth[39m[38;5;186m"[39m

[38;5;15mgraph[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/models/graph.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mgraph[39m

[38;5;15mgraph[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;242m# optim = get_config("common/optim.py").optim[39m
[38;5;15moptim[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mAdam[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mparams[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mget_RWKV_v4_config_optim[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr[39m[38;5;197m=[39m[38;5;141m8e-4[39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;242m# 配置model[39m
[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mGPT[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mvocab_size[39m[38;5;197m=[39m[38;5;141m6064[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mmodel_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mRWKV[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_layer[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_embd[39m[38;5;197m=[39m[38;5;141m1024[39m
[38;5;15m)[39m

[38;5;242m# 训练过程[39m
[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/train.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mtrain[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minput_placement_device[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mcpu[39m[38;5;186m"[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mdist[39m[38;5;197m.[39m[38;5;15mpipeline_num_layers[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m6[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_micro_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mscheduler[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mlr_scheduler[39m[38;5;197m.[39m[38;5;15mStepLR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mstep_size[39m[38;5;197m=[39m[38;5;141m1000[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m        [39m[38;5;15mgamma[39m[38;5;197m=[39m[38;5;141m1.0[39m
[38;5;15m)[39m[38;5;15m [39m

[38;5;242m# false = fp32[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mdatafile[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/data/enwik8[39m[38;5;186m"[39m
[38;5;242m# 获得一个 DataLoader 的配置对象[39m
[38;5;15mdataloader[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mbuild_nlp_train_loader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mdataset[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m        [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mRWKVDataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_dir[39m[38;5;197m=[39m[38;5;15mdatafile[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mepoch_length_fixed[39m[38;5;197m=[39m[38;5;141m9996[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# train.train_iter=3[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_epoch[39m[38;5;197m=[39m[38;5;141m1[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186moutput/rwkv_output_loss_compare[39m[38;5;186m"[39m
[38;5;242m# train.load_weight = "/home/zhangxiaoyu/RWKV-LM/libai/projects/RWKV_v4/model/output_model/" # 采用同一个model进行初始化[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mrdma_enabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# model.cfg.hidden_dropout_prob= 0.0 # 关闭所有的dropout[39m
[38;5;242m# model.cfg.attention_probs_dropout_prob= 0.0[39m
[38;5;242m# model.cfg.bias_dropout_fusion= False[39m

[38;5;242m# train.dist.pipeline_parallel_size=2[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mevaluation[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# train.train_iter=5[39m
[38;5;242m# train.dist.tensor_parallel_size = 2  # 并行度为 4 的模型并行[39m
[38;5;242m# train.dist.tensor_parallel_size = 4  # 并行度为 4 的模型并行[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mactivation_checkpoint[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mFalse[39m[38;5;15m [39m

[08/24 08:14:41] libai.engine.default INFO: Prepare training, validating, testing set
[08/24 08:14:42] libai.engine.default INFO: Auto-scaling the config to train.train_iter=10000, train.warmup_iter=0
[08/24 08:14:46] libai.engine.default INFO: Model:
GPT(
  (emb): VocabEmbedding(num_embeddings=6064, embedding_dim=1024)
  (blocks): Sequential(
    (0): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln0): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (1): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (2): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (3): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (4): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (5): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
  )
  (ln_out): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
  (head): Linear1D(in_features=1024, out_features=6064, bias=False, parallel=row)
  (head_q): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
  (head_k): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
)
[08/24 08:14:47] libai.engine.trainer INFO: Starting training from iteration 0
[08/24 08:14:47] libai.models.utils.graph_base INFO: Start compling the train graph which may take some time. Please wait for a moment ...
[08/24 08:15:42] libai INFO: Rank of current process: 1. World size: 2
[08/24 08:15:42] libai INFO: Command line arguments: Namespace(config_file='projects/RWKV_v4/configs/config_test.py', eval_only=False, fast_dev_run=False, opts=[], resume=False)
[08/24 08:15:42] libai INFO: Contents of args.config_file=projects/RWKV_v4/configs/config_test.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_config[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mtokenizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT2Tokenizer[39m
[38;5;242m# 配置 dataloader `build_image_train_loader` 和 `build_image_test_loader` 是 LiBai 提供的用于创建图像数据的训练集和测试集 DataLoader 的两个函数[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_nlp_test_loader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_nlp_train_loader[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15moneflow[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mflow[39m

[38;5;242m# 配置 model[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmodel[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT[39m[38;5;15m [39m[38;5;15m,[39m[38;5;15mGPTConfig[39m
[38;5;242m# 导入自定义的 dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mdataset[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mRWKVDataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mutils[39m[38;5;15m.[39m[38;5;15mconfig_optimizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_RWKV_v4_config_optim[39m


[38;5;15mtest[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15menable[39m[38;5;197m=[39m[38;5;81mFalse[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mweight_style[39m[38;5;197m=[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;186m"[39m[38;5;186mpytorch[39m[38;5;186m"[39m
[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mpath[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/RWKV-v4/for_load.pth[39m[38;5;186m"[39m

[38;5;15mgraph[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/models/graph.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mgraph[39m

[38;5;15mgraph[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;242m# optim = get_config("common/optim.py").optim[39m
[38;5;15moptim[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mAdam[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mparams[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mget_RWKV_v4_config_optim[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr[39m[38;5;197m=[39m[38;5;141m8e-4[39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;242m# 配置model[39m
[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mGPT[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mvocab_size[39m[38;5;197m=[39m[38;5;141m6064[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mmodel_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mRWKV[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_layer[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_embd[39m[38;5;197m=[39m[38;5;141m1024[39m
[38;5;15m)[39m

[38;5;242m# 训练过程[39m
[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/train.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mtrain[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minput_placement_device[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mcpu[39m[38;5;186m"[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mdist[39m[38;5;197m.[39m[38;5;15mpipeline_num_layers[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m6[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_micro_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mscheduler[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mlr_scheduler[39m[38;5;197m.[39m[38;5;15mStepLR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mstep_size[39m[38;5;197m=[39m[38;5;141m1000[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m        [39m[38;5;15mgamma[39m[38;5;197m=[39m[38;5;141m1.0[39m
[38;5;15m)[39m[38;5;15m [39m

[38;5;242m# false = fp32[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mdatafile[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/data/enwik8[39m[38;5;186m"[39m
[38;5;242m# 获得一个 DataLoader 的配置对象[39m
[38;5;15mdataloader[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mbuild_nlp_train_loader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mdataset[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m        [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mRWKVDataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_dir[39m[38;5;197m=[39m[38;5;15mdatafile[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mepoch_length_fixed[39m[38;5;197m=[39m[38;5;141m9996[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# train.train_iter=3[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_epoch[39m[38;5;197m=[39m[38;5;141m1[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186moutput/rwkv_output_loss_compare[39m[38;5;186m"[39m
[38;5;242m# train.load_weight = "/home/zhangxiaoyu/RWKV-LM/libai/projects/RWKV_v4/model/output_model/" # 采用同一个model进行初始化[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mrdma_enabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# model.cfg.hidden_dropout_prob= 0.0 # 关闭所有的dropout[39m
[38;5;242m# model.cfg.attention_probs_dropout_prob= 0.0[39m
[38;5;242m# model.cfg.bias_dropout_fusion= False[39m

[38;5;242m# train.dist.pipeline_parallel_size=2[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mevaluation[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# train.train_iter=5[39m
[38;5;242m# train.dist.tensor_parallel_size = 2  # 并行度为 4 的模型并行[39m
[38;5;242m# train.dist.tensor_parallel_size = 4  # 并行度为 4 的模型并行[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mactivation_checkpoint[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m [39m

[08/24 08:15:42] libai.engine.default INFO: Prepare training, validating, testing set
[08/24 08:15:43] libai.engine.default INFO: Auto-scaling the config to train.train_iter=10000, train.warmup_iter=0
[08/24 08:15:47] libai.engine.default INFO: Model:
GPT(
  (emb): VocabEmbedding(num_embeddings=6064, embedding_dim=1024)
  (blocks): Sequential(
    (0): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln0): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (1): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (2): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (3): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (4): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (5): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
  )
  (ln_out): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
  (head): Linear1D(in_features=1024, out_features=6064, bias=False, parallel=row)
  (head_q): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
  (head_k): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
)
[08/24 08:15:48] libai.engine.trainer INFO: Starting training from iteration 0
[08/24 08:15:48] libai.models.utils.graph_base INFO: Start compling the train graph which may take some time. Please wait for a moment ...
[08/24 08:17:40] libai INFO: Rank of current process: 1. World size: 2
[08/24 08:17:40] libai INFO: Command line arguments: Namespace(config_file='projects/RWKV_v4/configs/config_test.py', eval_only=False, fast_dev_run=False, opts=[], resume=False)
[08/24 08:17:40] libai INFO: Contents of args.config_file=projects/RWKV_v4/configs/config_test.py:
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15momegaconf[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mOmegaConf[39m

[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_config[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mconfig[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mLazyCall[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mtokenizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT2Tokenizer[39m
[38;5;242m# 配置 dataloader `build_image_train_loader` 和 `build_image_test_loader` 是 LiBai 提供的用于创建图像数据的训练集和测试集 DataLoader 的两个函数[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mlibai[39m[38;5;15m.[39m[38;5;15mdata[39m[38;5;15m.[39m[38;5;15mbuild[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mbuild_nlp_test_loader[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mbuild_nlp_train_loader[39m
[38;5;197mimport[39m[38;5;15m [39m[38;5;15moneflow[39m[38;5;15m [39m[38;5;81mas[39m[38;5;15m [39m[38;5;15mflow[39m

[38;5;242m# 配置 model[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mmodeling[39m[38;5;15m.[39m[38;5;15mmodel[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mGPT[39m[38;5;15m [39m[38;5;15m,[39m[38;5;15mGPTConfig[39m
[38;5;242m# 导入自定义的 dataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mdataset[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mRWKVDataset[39m
[38;5;197mfrom[39m[38;5;15m [39m[38;5;15mprojects[39m[38;5;15m.[39m[38;5;15mRWKV_v4[39m[38;5;15m.[39m[38;5;15mutils[39m[38;5;15m.[39m[38;5;15mconfig_optimizer[39m[38;5;15m [39m[38;5;197mimport[39m[38;5;15m [39m[38;5;15mget_RWKV_v4_config_optim[39m


[38;5;15mtest[39m[38;5;197m=[39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15menable[39m[38;5;197m=[39m[38;5;81mFalse[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mweight_style[39m[38;5;197m=[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;186m"[39m[38;5;186mpytorch[39m[38;5;186m"[39m
[38;5;15m)[39m
[38;5;15mtest[39m[38;5;197m.[39m[38;5;15mpath[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/RWKV-v4/for_load.pth[39m[38;5;186m"[39m

[38;5;15mgraph[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/models/graph.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mgraph[39m

[38;5;15mgraph[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;242m# optim = get_config("common/optim.py").optim[39m
[38;5;15moptim[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mAdam[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mparams[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mget_RWKV_v4_config_optim[39m[38;5;15m)[39m[38;5;15m([39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mlr[39m[38;5;197m=[39m[38;5;141m8e-4[39m[38;5;15m,[39m
[38;5;15m)[39m


[38;5;242m# 配置model[39m
[38;5;15mmodel[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mGPT[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mvocab_size[39m[38;5;197m=[39m[38;5;141m6064[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mmodel_type[39m[38;5;197m=[39m[38;5;186m'[39m[38;5;186mRWKV[39m[38;5;186m'[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_layer[39m[38;5;197m=[39m[38;5;141m6[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mn_embd[39m[38;5;197m=[39m[38;5;141m1024[39m
[38;5;15m)[39m

[38;5;242m# 训练过程[39m
[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mget_config[39m[38;5;15m([39m[38;5;186m"[39m[38;5;186mcommon/train.py[39m[38;5;186m"[39m[38;5;15m)[39m[38;5;197m.[39m[38;5;15mtrain[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15minput_placement_device[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mcpu[39m[38;5;186m"[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mdist[39m[38;5;197m.[39m[38;5;15mpipeline_num_layers[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m6[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_micro_batch_size[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mscheduler[39m[38;5;197m=[39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mflow[39m[38;5;197m.[39m[38;5;15moptim[39m[38;5;197m.[39m[38;5;15mlr_scheduler[39m[38;5;197m.[39m[38;5;15mStepLR[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m        [39m[38;5;15mstep_size[39m[38;5;197m=[39m[38;5;141m1000[39m[38;5;15m,[39m[38;5;15m [39m
[38;5;15m        [39m[38;5;15mgamma[39m[38;5;197m=[39m[38;5;141m1.0[39m
[38;5;15m)[39m[38;5;15m [39m

[38;5;242m# false = fp32[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mamp[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m

[38;5;15mdatafile[39m[38;5;197m=[39m[38;5;186m"[39m[38;5;186m/home/zhangxiaoyu/RWKV-LM/data/enwik8[39m[38;5;186m"[39m
[38;5;242m# 获得一个 DataLoader 的配置对象[39m
[38;5;15mdataloader[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mOmegaConf[39m[38;5;197m.[39m[38;5;15mcreate[39m[38;5;15m([39m[38;5;15m)[39m
[38;5;15mdataloader[39m[38;5;197m.[39m[38;5;15mtrain[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mbuild_nlp_train_loader[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m    [39m[38;5;15mdataset[39m[38;5;197m=[39m[38;5;15m[[39m
[38;5;15m        [39m[38;5;15mLazyCall[39m[38;5;15m([39m[38;5;15mRWKVDataset[39m[38;5;15m)[39m[38;5;15m([39m
[38;5;15m            [39m[38;5;15mdata_dir[39m[38;5;197m=[39m[38;5;15mdatafile[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mctx_len[39m[38;5;197m=[39m[38;5;141m1024[39m[38;5;15m,[39m
[38;5;15m            [39m[38;5;15mepoch_length_fixed[39m[38;5;197m=[39m[38;5;141m9996[39m[38;5;15m,[39m
[38;5;15m        [39m[38;5;15m)[39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15m][39m[38;5;15m,[39m
[38;5;15m    [39m[38;5;15mnum_workers[39m[38;5;197m=[39m[38;5;141m4[39m[38;5;15m,[39m
[38;5;15m)[39m

[38;5;242m# train.train_iter=3[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mtrain_epoch[39m[38;5;197m=[39m[38;5;141m1[39m

[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15moutput_dir[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186moutput/rwkv_output_loss_compare[39m[38;5;186m"[39m
[38;5;242m# train.load_weight = "/home/zhangxiaoyu/RWKV-LM/libai/projects/RWKV_v4/model/output_model/" # 采用同一个model进行初始化[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mrdma_enabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# model.cfg.hidden_dropout_prob= 0.0 # 关闭所有的dropout[39m
[38;5;242m# model.cfg.attention_probs_dropout_prob= 0.0[39m
[38;5;242m# model.cfg.bias_dropout_fusion= False[39m

[38;5;242m# train.dist.pipeline_parallel_size=2[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mevaluation[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;15m [39m[38;5;197m=[39m[38;5;15m [39m[38;5;81mFalse[39m

[38;5;242m# train.train_iter=5[39m
[38;5;242m# train.dist.tensor_parallel_size = 2  # 并行度为 4 的模型并行[39m
[38;5;242m# train.dist.tensor_parallel_size = 4  # 并行度为 4 的模型并行[39m
[38;5;15mtrain[39m[38;5;197m.[39m[38;5;15mactivation_checkpoint[39m[38;5;197m.[39m[38;5;15menabled[39m[38;5;197m=[39m[38;5;81mTrue[39m[38;5;15m [39m

[08/24 08:17:40] libai.engine.default INFO: Prepare training, validating, testing set
[08/24 08:17:42] libai.engine.default INFO: Auto-scaling the config to train.train_iter=10000, train.warmup_iter=0
[08/24 08:17:46] libai.engine.default INFO: Model:
GPT(
  (emb): VocabEmbedding(num_embeddings=6064, embedding_dim=1024)
  (blocks): Sequential(
    (0): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln0): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (1): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (2): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (3): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (4): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
    (5): Block(
      (ln1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (ln2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      (att): RWKV_TimeMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (output): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=row)
      )
      (ffn): RWKV_ChannelMix(
        (time_shift): ZeroPad2d()
        (key): Linear1D(in_features=1024, out_features=4096, bias=False, parallel=col)
        (receptance): Linear1D(in_features=1024, out_features=1024, bias=False, parallel=col)
        (value): Linear1D(in_features=4096, out_features=1024, bias=False, parallel=row)
      )
    )
  )
  (ln_out): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
  (head): Linear1D(in_features=1024, out_features=6064, bias=False, parallel=row)
  (head_q): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
  (head_k): Linear1D(in_features=1024, out_features=256, bias=False, parallel=col)
)
[08/24 08:17:46] libai.engine.trainer INFO: Starting training from iteration 0
[08/24 08:17:47] libai.models.utils.graph_base INFO: Start compling the train graph which may take some time. Please wait for a moment ...
